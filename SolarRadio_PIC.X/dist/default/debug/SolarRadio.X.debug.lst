

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Jul 15 17:12:25 2021

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F1615
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     
    45                           ; Version 2.05
    46                           ; Generated 20/12/2018 GMT
    47                           ; 
    48                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16F1615 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0008                     	;# 
    88  0009                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000E                     	;# 
    93  0010                     	;# 
    94  0011                     	;# 
    95  0012                     	;# 
    96  0013                     	;# 
    97  0014                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001A                     	;# 
   106  001B                     	;# 
   107  001B                     	;# 
   108  001C                     	;# 
   109  001D                     	;# 
   110  001E                     	;# 
   111  001F                     	;# 
   112  008C                     	;# 
   113  008E                     	;# 
   114  0090                     	;# 
   115  0091                     	;# 
   116  0092                     	;# 
   117  0093                     	;# 
   118  0094                     	;# 
   119  0095                     	;# 
   120  0096                     	;# 
   121  0098                     	;# 
   122  0099                     	;# 
   123  009A                     	;# 
   124  009B                     	;# 
   125  009B                     	;# 
   126  009C                     	;# 
   127  009D                     	;# 
   128  009E                     	;# 
   129  009F                     	;# 
   130  010C                     	;# 
   131  010E                     	;# 
   132  0111                     	;# 
   133  0112                     	;# 
   134  0113                     	;# 
   135  0114                     	;# 
   136  0115                     	;# 
   137  0116                     	;# 
   138  0117                     	;# 
   139  0118                     	;# 
   140  0119                     	;# 
   141  011C                     	;# 
   142  018C                     	;# 
   143  018E                     	;# 
   144  0191                     	;# 
   145  0191                     	;# 
   146  0192                     	;# 
   147  0193                     	;# 
   148  0193                     	;# 
   149  0194                     	;# 
   150  0195                     	;# 
   151  0196                     	;# 
   152  0197                     	;# 
   153  0199                     	;# 
   154  0199                     	;# 
   155  0199                     	;# 
   156  019A                     	;# 
   157  019A                     	;# 
   158  019A                     	;# 
   159  019B                     	;# 
   160  019B                     	;# 
   161  019B                     	;# 
   162  019B                     	;# 
   163  019B                     	;# 
   164  019C                     	;# 
   165  019C                     	;# 
   166  019C                     	;# 
   167  019D                     	;# 
   168  019D                     	;# 
   169  019D                     	;# 
   170  019E                     	;# 
   171  019E                     	;# 
   172  019E                     	;# 
   173  019F                     	;# 
   174  019F                     	;# 
   175  019F                     	;# 
   176  019F                     	;# 
   177  019F                     	;# 
   178  020C                     	;# 
   179  020E                     	;# 
   180  0211                     	;# 
   181  0211                     	;# 
   182  0212                     	;# 
   183  0212                     	;# 
   184  0213                     	;# 
   185  0213                     	;# 
   186  0214                     	;# 
   187  0214                     	;# 
   188  0215                     	;# 
   189  0215                     	;# 
   190  0215                     	;# 
   191  0215                     	;# 
   192  0216                     	;# 
   193  0216                     	;# 
   194  0217                     	;# 
   195  0217                     	;# 
   196  028C                     	;# 
   197  028E                     	;# 
   198  0291                     	;# 
   199  0291                     	;# 
   200  0292                     	;# 
   201  0293                     	;# 
   202  0294                     	;# 
   203  0298                     	;# 
   204  0298                     	;# 
   205  0299                     	;# 
   206  029A                     	;# 
   207  029B                     	;# 
   208  029E                     	;# 
   209  030C                     	;# 
   210  030E                     	;# 
   211  038C                     	;# 
   212  038E                     	;# 
   213  0391                     	;# 
   214  0392                     	;# 
   215  0393                     	;# 
   216  0397                     	;# 
   217  0398                     	;# 
   218  0399                     	;# 
   219  040E                     	;# 
   220  0413                     	;# 
   221  0413                     	;# 
   222  0414                     	;# 
   223  0414                     	;# 
   224  0415                     	;# 
   225  0416                     	;# 
   226  0417                     	;# 
   227  0418                     	;# 
   228  041A                     	;# 
   229  041A                     	;# 
   230  041B                     	;# 
   231  041B                     	;# 
   232  041C                     	;# 
   233  041D                     	;# 
   234  041E                     	;# 
   235  041F                     	;# 
   236  0493                     	;# 
   237  0494                     	;# 
   238  0495                     	;# 
   239  0496                     	;# 
   240  049A                     	;# 
   241  049B                     	;# 
   242  049C                     	;# 
   243  049D                     	;# 
   244  058C                     	;# 
   245  058C                     	;# 
   246  058D                     	;# 
   247  058E                     	;# 
   248  058E                     	;# 
   249  058F                     	;# 
   250  0590                     	;# 
   251  0590                     	;# 
   252  0591                     	;# 
   253  0592                     	;# 
   254  0592                     	;# 
   255  0593                     	;# 
   256  0594                     	;# 
   257  0594                     	;# 
   258  0595                     	;# 
   259  0596                     	;# 
   260  0596                     	;# 
   261  0597                     	;# 
   262  0598                     	;# 
   263  0599                     	;# 
   264  059A                     	;# 
   265  059B                     	;# 
   266  059B                     	;# 
   267  059C                     	;# 
   268  059D                     	;# 
   269  060C                     	;# 
   270  060C                     	;# 
   271  060D                     	;# 
   272  060E                     	;# 
   273  060F                     	;# 
   274  060F                     	;# 
   275  0610                     	;# 
   276  0611                     	;# 
   277  0612                     	;# 
   278  0613                     	;# 
   279  0614                     	;# 
   280  0617                     	;# 
   281  0617                     	;# 
   282  0618                     	;# 
   283  0619                     	;# 
   284  061A                     	;# 
   285  061A                     	;# 
   286  061B                     	;# 
   287  061C                     	;# 
   288  0691                     	;# 
   289  0692                     	;# 
   290  0693                     	;# 
   291  0694                     	;# 
   292  0695                     	;# 
   293  0696                     	;# 
   294  0697                     	;# 
   295  0699                     	;# 
   296  069A                     	;# 
   297  0711                     	;# 
   298  0712                     	;# 
   299  0713                     	;# 
   300  0714                     	;# 
   301  0715                     	;# 
   302  0718                     	;# 
   303  0718                     	;# 
   304  0719                     	;# 
   305  071A                     	;# 
   306  071A                     	;# 
   307  071B                     	;# 
   308  071C                     	;# 
   309  071D                     	;# 
   310  0791                     	;# 
   311  0791                     	;# 
   312  0792                     	;# 
   313  0793                     	;# 
   314  0793                     	;# 
   315  0794                     	;# 
   316  0795                     	;# 
   317  0795                     	;# 
   318  0796                     	;# 
   319  0797                     	;# 
   320  0797                     	;# 
   321  0798                     	;# 
   322  0799                     	;# 
   323  079A                     	;# 
   324  080C                     	;# 
   325  080C                     	;# 
   326  080D                     	;# 
   327  080E                     	;# 
   328  080E                     	;# 
   329  080F                     	;# 
   330  0810                     	;# 
   331  0810                     	;# 
   332  0811                     	;# 
   333  0812                     	;# 
   334  0812                     	;# 
   335  0813                     	;# 
   336  0814                     	;# 
   337  0815                     	;# 
   338  0816                     	;# 
   339  0817                     	;# 
   340  0818                     	;# 
   341  0819                     	;# 
   342  081A                     	;# 
   343  081A                     	;# 
   344  081B                     	;# 
   345  081C                     	;# 
   346  081C                     	;# 
   347  081D                     	;# 
   348  088C                     	;# 
   349  088D                     	;# 
   350  088E                     	;# 
   351  088F                     	;# 
   352  088F                     	;# 
   353  0890                     	;# 
   354  0891                     	;# 
   355  0892                     	;# 
   356  0893                     	;# 
   357  0893                     	;# 
   358  0894                     	;# 
   359  0895                     	;# 
   360  0896                     	;# 
   361  0897                     	;# 
   362  0897                     	;# 
   363  0898                     	;# 
   364  0899                     	;# 
   365  0D8C                     	;# 
   366  0D8C                     	;# 
   367  0D8D                     	;# 
   368  0D8E                     	;# 
   369  0D8F                     	;# 
   370  0D8F                     	;# 
   371  0D90                     	;# 
   372  0D91                     	;# 
   373  0D92                     	;# 
   374  0D92                     	;# 
   375  0D93                     	;# 
   376  0D94                     	;# 
   377  0D95                     	;# 
   378  0D95                     	;# 
   379  0D96                     	;# 
   380  0D97                     	;# 
   381  0D98                     	;# 
   382  0D99                     	;# 
   383  0D9A                     	;# 
   384  0D9B                     	;# 
   385  0D9C                     	;# 
   386  0D9D                     	;# 
   387  0D9E                     	;# 
   388  0D9E                     	;# 
   389  0D9F                     	;# 
   390  0DA0                     	;# 
   391  0DA1                     	;# 
   392  0DA1                     	;# 
   393  0DA2                     	;# 
   394  0DA3                     	;# 
   395  0DA4                     	;# 
   396  0DA4                     	;# 
   397  0DA5                     	;# 
   398  0DA6                     	;# 
   399  0DA7                     	;# 
   400  0DA7                     	;# 
   401  0DA8                     	;# 
   402  0DA9                     	;# 
   403  0DAA                     	;# 
   404  0DAB                     	;# 
   405  0DAC                     	;# 
   406  0DAD                     	;# 
   407  0DAE                     	;# 
   408  0DAF                     	;# 
   409  0E0F                     	;# 
   410  0E10                     	;# 
   411  0E11                     	;# 
   412  0E12                     	;# 
   413  0E13                     	;# 
   414  0E14                     	;# 
   415  0E15                     	;# 
   416  0E16                     	;# 
   417  0E17                     	;# 
   418  0E18                     	;# 
   419  0E19                     	;# 
   420  0E1A                     	;# 
   421  0E1B                     	;# 
   422  0E1C                     	;# 
   423  0E1D                     	;# 
   424  0E1E                     	;# 
   425  0E1F                     	;# 
   426  0E20                     	;# 
   427  0E21                     	;# 
   428  0E22                     	;# 
   429  0E23                     	;# 
   430  0E24                     	;# 
   431  0E25                     	;# 
   432  0E26                     	;# 
   433  0E27                     	;# 
   434  0E28                     	;# 
   435  0E29                     	;# 
   436  0E2A                     	;# 
   437  0E2B                     	;# 
   438  0E2C                     	;# 
   439  0E2D                     	;# 
   440  0E2E                     	;# 
   441  0E90                     	;# 
   442  0E91                     	;# 
   443  0E92                     	;# 
   444  0E94                     	;# 
   445  0E95                     	;# 
   446  0EA0                     	;# 
   447  0EA1                     	;# 
   448  0EA2                     	;# 
   449  0EA3                     	;# 
   450  0EA4                     	;# 
   451  0EA5                     	;# 
   452  0F0F                     	;# 
   453  0F10                     	;# 
   454  0F11                     	;# 
   455  0F12                     	;# 
   456  0F13                     	;# 
   457  0F14                     	;# 
   458  0F15                     	;# 
   459  0F16                     	;# 
   460  0F17                     	;# 
   461  0F18                     	;# 
   462  0F19                     	;# 
   463  0F1A                     	;# 
   464  0F1B                     	;# 
   465  0F1C                     	;# 
   466  0F1D                     	;# 
   467  0F1E                     	;# 
   468  0F1F                     	;# 
   469  0F20                     	;# 
   470  0F21                     	;# 
   471  0F22                     	;# 
   472  0F23                     	;# 
   473  0F24                     	;# 
   474  0F25                     	;# 
   475  0F26                     	;# 
   476  0F27                     	;# 
   477  0F28                     	;# 
   478  0F29                     	;# 
   479  0F2A                     	;# 
   480  0F2B                     	;# 
   481  0F2C                     	;# 
   482  0F2D                     	;# 
   483  0F2E                     	;# 
   484  0F2F                     	;# 
   485  0F30                     	;# 
   486  0F31                     	;# 
   487  0F32                     	;# 
   488  0F33                     	;# 
   489  0F34                     	;# 
   490  0F35                     	;# 
   491  0F36                     	;# 
   492  0F37                     	;# 
   493  0FE4                     	;# 
   494  0FE5                     	;# 
   495  0FE6                     	;# 
   496  0FE7                     	;# 
   497  0FE8                     	;# 
   498  0FE9                     	;# 
   499  0FEA                     	;# 
   500  0FEB                     	;# 
   501  0FED                     	;# 
   502  0FEE                     	;# 
   503  0FEF                     	;# 
   504  0000                     	;# 
   505  0001                     	;# 
   506  0002                     	;# 
   507  0003                     	;# 
   508  0004                     	;# 
   509  0005                     	;# 
   510  0006                     	;# 
   511  0007                     	;# 
   512  0008                     	;# 
   513  0009                     	;# 
   514  000A                     	;# 
   515  000B                     	;# 
   516  000C                     	;# 
   517  000E                     	;# 
   518  0010                     	;# 
   519  0011                     	;# 
   520  0012                     	;# 
   521  0013                     	;# 
   522  0014                     	;# 
   523  0015                     	;# 
   524  0016                     	;# 
   525  0016                     	;# 
   526  0017                     	;# 
   527  0018                     	;# 
   528  0019                     	;# 
   529  001A                     	;# 
   530  001A                     	;# 
   531  001B                     	;# 
   532  001B                     	;# 
   533  001C                     	;# 
   534  001D                     	;# 
   535  001E                     	;# 
   536  001F                     	;# 
   537  008C                     	;# 
   538  008E                     	;# 
   539  0090                     	;# 
   540  0091                     	;# 
   541  0092                     	;# 
   542  0093                     	;# 
   543  0094                     	;# 
   544  0095                     	;# 
   545  0096                     	;# 
   546  0098                     	;# 
   547  0099                     	;# 
   548  009A                     	;# 
   549  009B                     	;# 
   550  009B                     	;# 
   551  009C                     	;# 
   552  009D                     	;# 
   553  009E                     	;# 
   554  009F                     	;# 
   555  010C                     	;# 
   556  010E                     	;# 
   557  0111                     	;# 
   558  0112                     	;# 
   559  0113                     	;# 
   560  0114                     	;# 
   561  0115                     	;# 
   562  0116                     	;# 
   563  0117                     	;# 
   564  0118                     	;# 
   565  0119                     	;# 
   566  011C                     	;# 
   567  018C                     	;# 
   568  018E                     	;# 
   569  0191                     	;# 
   570  0191                     	;# 
   571  0192                     	;# 
   572  0193                     	;# 
   573  0193                     	;# 
   574  0194                     	;# 
   575  0195                     	;# 
   576  0196                     	;# 
   577  0197                     	;# 
   578  0199                     	;# 
   579  0199                     	;# 
   580  0199                     	;# 
   581  019A                     	;# 
   582  019A                     	;# 
   583  019A                     	;# 
   584  019B                     	;# 
   585  019B                     	;# 
   586  019B                     	;# 
   587  019B                     	;# 
   588  019B                     	;# 
   589  019C                     	;# 
   590  019C                     	;# 
   591  019C                     	;# 
   592  019D                     	;# 
   593  019D                     	;# 
   594  019D                     	;# 
   595  019E                     	;# 
   596  019E                     	;# 
   597  019E                     	;# 
   598  019F                     	;# 
   599  019F                     	;# 
   600  019F                     	;# 
   601  019F                     	;# 
   602  019F                     	;# 
   603  020C                     	;# 
   604  020E                     	;# 
   605  0211                     	;# 
   606  0211                     	;# 
   607  0212                     	;# 
   608  0212                     	;# 
   609  0213                     	;# 
   610  0213                     	;# 
   611  0214                     	;# 
   612  0214                     	;# 
   613  0215                     	;# 
   614  0215                     	;# 
   615  0215                     	;# 
   616  0215                     	;# 
   617  0216                     	;# 
   618  0216                     	;# 
   619  0217                     	;# 
   620  0217                     	;# 
   621  028C                     	;# 
   622  028E                     	;# 
   623  0291                     	;# 
   624  0291                     	;# 
   625  0292                     	;# 
   626  0293                     	;# 
   627  0294                     	;# 
   628  0298                     	;# 
   629  0298                     	;# 
   630  0299                     	;# 
   631  029A                     	;# 
   632  029B                     	;# 
   633  029E                     	;# 
   634  030C                     	;# 
   635  030E                     	;# 
   636  038C                     	;# 
   637  038E                     	;# 
   638  0391                     	;# 
   639  0392                     	;# 
   640  0393                     	;# 
   641  0397                     	;# 
   642  0398                     	;# 
   643  0399                     	;# 
   644  040E                     	;# 
   645  0413                     	;# 
   646  0413                     	;# 
   647  0414                     	;# 
   648  0414                     	;# 
   649  0415                     	;# 
   650  0416                     	;# 
   651  0417                     	;# 
   652  0418                     	;# 
   653  041A                     	;# 
   654  041A                     	;# 
   655  041B                     	;# 
   656  041B                     	;# 
   657  041C                     	;# 
   658  041D                     	;# 
   659  041E                     	;# 
   660  041F                     	;# 
   661  0493                     	;# 
   662  0494                     	;# 
   663  0495                     	;# 
   664  0496                     	;# 
   665  049A                     	;# 
   666  049B                     	;# 
   667  049C                     	;# 
   668  049D                     	;# 
   669  058C                     	;# 
   670  058C                     	;# 
   671  058D                     	;# 
   672  058E                     	;# 
   673  058E                     	;# 
   674  058F                     	;# 
   675  0590                     	;# 
   676  0590                     	;# 
   677  0591                     	;# 
   678  0592                     	;# 
   679  0592                     	;# 
   680  0593                     	;# 
   681  0594                     	;# 
   682  0594                     	;# 
   683  0595                     	;# 
   684  0596                     	;# 
   685  0596                     	;# 
   686  0597                     	;# 
   687  0598                     	;# 
   688  0599                     	;# 
   689  059A                     	;# 
   690  059B                     	;# 
   691  059B                     	;# 
   692  059C                     	;# 
   693  059D                     	;# 
   694  060C                     	;# 
   695  060C                     	;# 
   696  060D                     	;# 
   697  060E                     	;# 
   698  060F                     	;# 
   699  060F                     	;# 
   700  0610                     	;# 
   701  0611                     	;# 
   702  0612                     	;# 
   703  0613                     	;# 
   704  0614                     	;# 
   705  0617                     	;# 
   706  0617                     	;# 
   707  0618                     	;# 
   708  0619                     	;# 
   709  061A                     	;# 
   710  061A                     	;# 
   711  061B                     	;# 
   712  061C                     	;# 
   713  0691                     	;# 
   714  0692                     	;# 
   715  0693                     	;# 
   716  0694                     	;# 
   717  0695                     	;# 
   718  0696                     	;# 
   719  0697                     	;# 
   720  0699                     	;# 
   721  069A                     	;# 
   722  0711                     	;# 
   723  0712                     	;# 
   724  0713                     	;# 
   725  0714                     	;# 
   726  0715                     	;# 
   727  0718                     	;# 
   728  0718                     	;# 
   729  0719                     	;# 
   730  071A                     	;# 
   731  071A                     	;# 
   732  071B                     	;# 
   733  071C                     	;# 
   734  071D                     	;# 
   735  0791                     	;# 
   736  0791                     	;# 
   737  0792                     	;# 
   738  0793                     	;# 
   739  0793                     	;# 
   740  0794                     	;# 
   741  0795                     	;# 
   742  0795                     	;# 
   743  0796                     	;# 
   744  0797                     	;# 
   745  0797                     	;# 
   746  0798                     	;# 
   747  0799                     	;# 
   748  079A                     	;# 
   749  080C                     	;# 
   750  080C                     	;# 
   751  080D                     	;# 
   752  080E                     	;# 
   753  080E                     	;# 
   754  080F                     	;# 
   755  0810                     	;# 
   756  0810                     	;# 
   757  0811                     	;# 
   758  0812                     	;# 
   759  0812                     	;# 
   760  0813                     	;# 
   761  0814                     	;# 
   762  0815                     	;# 
   763  0816                     	;# 
   764  0817                     	;# 
   765  0818                     	;# 
   766  0819                     	;# 
   767  081A                     	;# 
   768  081A                     	;# 
   769  081B                     	;# 
   770  081C                     	;# 
   771  081C                     	;# 
   772  081D                     	;# 
   773  088C                     	;# 
   774  088D                     	;# 
   775  088E                     	;# 
   776  088F                     	;# 
   777  088F                     	;# 
   778  0890                     	;# 
   779  0891                     	;# 
   780  0892                     	;# 
   781  0893                     	;# 
   782  0893                     	;# 
   783  0894                     	;# 
   784  0895                     	;# 
   785  0896                     	;# 
   786  0897                     	;# 
   787  0897                     	;# 
   788  0898                     	;# 
   789  0899                     	;# 
   790  0D8C                     	;# 
   791  0D8C                     	;# 
   792  0D8D                     	;# 
   793  0D8E                     	;# 
   794  0D8F                     	;# 
   795  0D8F                     	;# 
   796  0D90                     	;# 
   797  0D91                     	;# 
   798  0D92                     	;# 
   799  0D92                     	;# 
   800  0D93                     	;# 
   801  0D94                     	;# 
   802  0D95                     	;# 
   803  0D95                     	;# 
   804  0D96                     	;# 
   805  0D97                     	;# 
   806  0D98                     	;# 
   807  0D99                     	;# 
   808  0D9A                     	;# 
   809  0D9B                     	;# 
   810  0D9C                     	;# 
   811  0D9D                     	;# 
   812  0D9E                     	;# 
   813  0D9E                     	;# 
   814  0D9F                     	;# 
   815  0DA0                     	;# 
   816  0DA1                     	;# 
   817  0DA1                     	;# 
   818  0DA2                     	;# 
   819  0DA3                     	;# 
   820  0DA4                     	;# 
   821  0DA4                     	;# 
   822  0DA5                     	;# 
   823  0DA6                     	;# 
   824  0DA7                     	;# 
   825  0DA7                     	;# 
   826  0DA8                     	;# 
   827  0DA9                     	;# 
   828  0DAA                     	;# 
   829  0DAB                     	;# 
   830  0DAC                     	;# 
   831  0DAD                     	;# 
   832  0DAE                     	;# 
   833  0DAF                     	;# 
   834  0E0F                     	;# 
   835  0E10                     	;# 
   836  0E11                     	;# 
   837  0E12                     	;# 
   838  0E13                     	;# 
   839  0E14                     	;# 
   840  0E15                     	;# 
   841  0E16                     	;# 
   842  0E17                     	;# 
   843  0E18                     	;# 
   844  0E19                     	;# 
   845  0E1A                     	;# 
   846  0E1B                     	;# 
   847  0E1C                     	;# 
   848  0E1D                     	;# 
   849  0E1E                     	;# 
   850  0E1F                     	;# 
   851  0E20                     	;# 
   852  0E21                     	;# 
   853  0E22                     	;# 
   854  0E23                     	;# 
   855  0E24                     	;# 
   856  0E25                     	;# 
   857  0E26                     	;# 
   858  0E27                     	;# 
   859  0E28                     	;# 
   860  0E29                     	;# 
   861  0E2A                     	;# 
   862  0E2B                     	;# 
   863  0E2C                     	;# 
   864  0E2D                     	;# 
   865  0E2E                     	;# 
   866  0E90                     	;# 
   867  0E91                     	;# 
   868  0E92                     	;# 
   869  0E94                     	;# 
   870  0E95                     	;# 
   871  0EA0                     	;# 
   872  0EA1                     	;# 
   873  0EA2                     	;# 
   874  0EA3                     	;# 
   875  0EA4                     	;# 
   876  0EA5                     	;# 
   877  0F0F                     	;# 
   878  0F10                     	;# 
   879  0F11                     	;# 
   880  0F12                     	;# 
   881  0F13                     	;# 
   882  0F14                     	;# 
   883  0F15                     	;# 
   884  0F16                     	;# 
   885  0F17                     	;# 
   886  0F18                     	;# 
   887  0F19                     	;# 
   888  0F1A                     	;# 
   889  0F1B                     	;# 
   890  0F1C                     	;# 
   891  0F1D                     	;# 
   892  0F1E                     	;# 
   893  0F1F                     	;# 
   894  0F20                     	;# 
   895  0F21                     	;# 
   896  0F22                     	;# 
   897  0F23                     	;# 
   898  0F24                     	;# 
   899  0F25                     	;# 
   900  0F26                     	;# 
   901  0F27                     	;# 
   902  0F28                     	;# 
   903  0F29                     	;# 
   904  0F2A                     	;# 
   905  0F2B                     	;# 
   906  0F2C                     	;# 
   907  0F2D                     	;# 
   908  0F2E                     	;# 
   909  0F2F                     	;# 
   910  0F30                     	;# 
   911  0F31                     	;# 
   912  0F32                     	;# 
   913  0F33                     	;# 
   914  0F34                     	;# 
   915  0F35                     	;# 
   916  0F36                     	;# 
   917  0F37                     	;# 
   918  0FE4                     	;# 
   919  0FE5                     	;# 
   920  0FE6                     	;# 
   921  0FE7                     	;# 
   922  0FE8                     	;# 
   923  0FE9                     	;# 
   924  0FEA                     	;# 
   925  0FEB                     	;# 
   926  0FED                     	;# 
   927  0FEE                     	;# 
   928  0FEF                     	;# 
   929                           
   930                           	psect	idataBANK0
   931  057D                     __pidataBANK0:	
   932                           
   933                           ;initializer for _SYNC_WORDS
   934  057D  3467               	retlw	103
   935  057E  3467               	retlw	103
   936  057F  3467               	retlw	103
   937  0580  3467               	retlw	103
   938  0581  3467               	retlw	103
   939  0582  3467               	retlw	103
   940  0583  3467               	retlw	103
   941  0584  3467               	retlw	103
   942                           
   943                           ;initializer for getPowerSettings@F9489
   944  0585  3411               	retlw	17
   945  0586  3400               	retlw	0
   946                           
   947                           ;initializer for restartRx@F9485
   948  0587  34BD               	retlw	189
   949  0588  3406               	retlw	6
   950                           
   951                           ;initializer for startRSSISampling@F9481
   952  0589  34A3               	retlw	163
   953  058A  3401               	retlw	1
   954                           
   955                           ;initializer for checkRSSISampling@F9477
   956  058B  3423               	retlw	35
   957  058C  3400               	retlw	0
   958                           
   959                           ;initializer for getModeFlags@F9473
   960  058D  3427               	retlw	39
   961  058E  3400               	retlw	0
   962                           
   963                           ;initializer for getOperatingMode@F9464
   964  058F  3401               	retlw	1
   965  0590  3400               	retlw	0
   966                           
   967                           ;initializer for getRSSIThreshold@F9460
   968  0591  3429               	retlw	41
   969  0592  3400               	retlw	0
   970                           
   971                           ;initializer for getFifoFlags@F9456
   972  0593  3428               	retlw	40
   973  0594  3400               	retlw	0
   974                           
   975                           ;initializer for getRSSI@F9452
   976  0595  3424               	retlw	36
   977  0596  3400               	retlw	0
   978                           
   979                           ;initializer for setPreambleLength@F9437
   980  0597  34AD               	retlw	173
   981  0598  3403               	retlw	3
   982                           
   983                           ;initializer for checkForPayload@F9430
   984  0599  3428               	retlw	40
   985  059A  3400               	retlw	0
   986                           
   987                           ;initializer for setModulationThreshold@F9426
   988  059B  34BC               	retlw	188
   989  059C  3407               	retlw	7
   990                           
   991                           ;initializer for setPacketFormat@F9415
   992  059D  34B7               	retlw	183
   993  059E  3410               	retlw	16
   994                           
   995                           ;initializer for _recommended_params
   996  059F  3498               	retlw	152
   997  05A0  3408               	retlw	8
   998  05A1  3499               	retlw	153
   999  05A2  3455               	retlw	85
  1000  05A3  349A               	retlw	154
  1001  05A4  348B               	retlw	139
  1002  05A5  34EF               	retlw	239
  1003  05A6  3400               	retlw	0
  1004  05A7  3400               	retlw	0
  1005  05A8  3400               	retlw	0
  1006                           
  1007                           	psect	idataBANK2
  1008  066D                     __pidataBANK2:	
  1009                           
  1010                           ;initializer for main@F9389
  1011  066D  3400               	retlw	0
  1012  066E  3400               	retlw	0
  1013  066F  3400               	retlw	0
  1014  0670  3400               	retlw	0
  1015  0671  3400               	retlw	0
  1016  0672  3400               	retlw	0
  1017  0673  3400               	retlw	0
  1018  0674  3400               	retlw	0
  1019  0675  3400               	retlw	0
  1020  0676  3400               	retlw	0
  1021  0677  3400               	retlw	0
  1022  0678  3400               	retlw	0
  1023  0679  3400               	retlw	0
  1024  067A  3400               	retlw	0
  1025  067B  3400               	retlw	0
  1026  067C  3400               	retlw	0
  1027  067D  3400               	retlw	0
  1028  067E  3400               	retlw	0
  1029  067F  3400               	retlw	0
  1030  0680  3400               	retlw	0
  1031  0681  3400               	retlw	0
  1032  0682  3400               	retlw	0
  1033  0683  3400               	retlw	0
  1034  0684  3400               	retlw	0
  1035  0685  3400               	retlw	0
  1036  0686  3400               	retlw	0
  1037  0687  3400               	retlw	0
  1038  0688  3400               	retlw	0
  1039  0689  3400               	retlw	0
  1040  068A  3400               	retlw	0
  1041  068B  3400               	retlw	0
  1042  068C  3400               	retlw	0
  1043  068D  3400               	retlw	0
  1044  068E  3400               	retlw	0
  1045  068F  3400               	retlw	0
  1046  0690  3400               	retlw	0
  1047  0691  3400               	retlw	0
  1048  0692  3400               	retlw	0
  1049  0693  3400               	retlw	0
  1050  0694  3400               	retlw	0
  1051  0695  340C               	retlw	12
  1052  0696  3400               	retlw	0
  1053  0697  3402               	retlw	2
  1054  0698  3408               	retlw	8
  1055  0699  3400               	retlw	0
  1056  069A  3400               	retlw	0
  1057  069B  3400               	retlw	0
  1058  069C  3400               	retlw	0
  1059  069D  3400               	retlw	0
  1060  069E  3400               	retlw	0
  1061  069F  3400               	retlw	0
  1062  06A0  3400               	retlw	0
  1063  06A1  3400               	retlw	0
  1064  06A2  3400               	retlw	0
  1065  06A3  3400               	retlw	0
  1066  06A4  3400               	retlw	0
  1067  06A5  3400               	retlw	0
  1068  06A6  3400               	retlw	0
  1069  06A7  3400               	retlw	0
  1070  06A8  3400               	retlw	0
  1071  06A9  3400               	retlw	0
  1072  06AA  3400               	retlw	0
  1073  06AB  3400               	retlw	0
  1074  06AC  3400               	retlw	0
  1075  06AD  3420               	retlw	32
  1076  06AE  34E4               	retlw	228
  1077  06AF  3467               	retlw	103
  1078  06B0  3467               	retlw	103
  1079  06B1  3467               	retlw	103
  1080  06B2  3467               	retlw	103
  1081  06B3  3467               	retlw	103
  1082  06B4  3467               	retlw	103
  1083  06B5  3467               	retlw	103
  1084  06B6  3467               	retlw	103
  1085  06B7  3400               	retlw	0
  1086  000E                     _PORTCbits	set	14
  1087  000C                     _PORTA	set	12
  1088  008C                     _TRISAbits	set	140
  1089  0099                     _OSCCONbits	set	153
  1090  008E                     _TRISCbits	set	142
  1091  018E                     _ANSELC	set	398
  1092  018C                     _ANSELA	set	396
  1093  0215                     _SSP1CONbits	set	533
  1094  0215                     _SSP1CON1bits	set	533
  1095  0214                     _SSP1STATbits	set	532
  1096  0211                     _SSP1BUF	set	529
  1097  0E21                     _SSPDATPPS	set	3617
  1098  0EA3                     _RC3PPS	set	3747
  1099  0EA0                     _RC0PPS	set	3744
  1100                           
  1101                           ; #config settings
  1102  0000                     
  1103                           	psect	cinit
  1104  07D9                     start_initialization:	
  1105  07D9                     __initialization:	
  1106                           
  1107                           ; Initialize objects allocated to BANK0
  1108  07D9  307D               	movlw	low __pidataBANK0
  1109  07DA  0084               	movwf	4
  1110  07DB  3085               	movlw	(high __pidataBANK0)| (0+128)
  1111  07DC  0085               	movwf	5
  1112  07DD  3020               	movlw	low __pdataBANK0
  1113  07DE  0086               	movwf	6
  1114  07DF  3000               	movlw	high __pdataBANK0
  1115  07E0  0087               	movwf	7
  1116  07E1  302C               	movlw	44
  1117  07E2  3183  2394  3187   	fcall	init_ram
  1118                           
  1119                           ; Initialize objects allocated to BANK2
  1120  07E5  306D               	movlw	low __pidataBANK2
  1121  07E6  0084               	movwf	4
  1122  07E7  3086               	movlw	(high __pidataBANK2)| (0+128)
  1123  07E8  0085               	movwf	5
  1124  07E9  3020               	movlw	low __pdataBANK2
  1125  07EA  0086               	movwf	6
  1126  07EB  3001               	movlw	high __pdataBANK2
  1127  07EC  0087               	movwf	7
  1128  07ED  304B               	movlw	75
  1129  07EE  3183  2394  3187   	fcall	init_ram
  1130                           
  1131                           ; Clear objects allocated to BANK0
  1132  07F1  305E               	movlw	low __pbssBANK0
  1133  07F2  0084               	movwf	4
  1134  07F3  3000               	movlw	high __pbssBANK0
  1135  07F4  0085               	movwf	5
  1136  07F5  3011               	movlw	17
  1137  07F6  3183  238E         	fcall	clear_ram0
  1138                           
  1139                           ; Clear objects allocated to BANK1
  1140  07F8  0021               	movlb	1	; select bank1
  1141  07F9  01EB               	clrf	__pbssBANK1& (0+127)
  1142  07FA  01EC               	clrf	(__pbssBANK1+1)& (0+127)
  1143  07FB  01ED               	clrf	(__pbssBANK1+2)& (0+127)
  1144  07FC  01EE               	clrf	(__pbssBANK1+3)& (0+127)
  1145  07FD                     end_of_initialization:	
  1146                           ;End of C runtime variable initialization code
  1147                           
  1148  07FD                     __end_of__initialization:	
  1149  07FD  0020               	movlb	0
  1150  07FE  3187  2F66         	ljmp	_main	;jump to C main() function
  1151                           
  1152                           	psect	bssBANK0
  1153  005E                     __pbssBANK0:	
  1154  005E                     setAutoMode@F9494:	
  1155  005E                     	ds	2
  1156  0060                     setDiodeMapping@F9469:	
  1157  0060                     	ds	2
  1158  0062                     setPowerOutput@F9444:	
  1159  0062                     	ds	2
  1160  0064                     setOperatingMode@F9420:	
  1161  0064                     	ds	2
  1162  0066                     setRSSIThreshold@F9411:	
  1163  0066                     	ds	2
  1164  0068                     setNodeAddress@F9407:	
  1165  0068                     	ds	2
  1166  006A                     setPacketLength@F9403:	
  1167  006A                     	ds	2
  1168  006C                     sendPairs@F9382:	
  1169  006C                     	ds	2
  1170  006E                     _RSSISampling:	
  1171  006E                     	ds	1
  1172                           
  1173                           	psect	dataBANK0
  1174  0020                     __pdataBANK0:	
  1175  0020                     _SYNC_WORDS:	
  1176  0020                     	ds	8
  1177  0028                     getPowerSettings@F9489:	
  1178  0028                     	ds	2
  1179  002A                     restartRx@F9485:	
  1180  002A                     	ds	2
  1181  002C                     startRSSISampling@F9481:	
  1182  002C                     	ds	2
  1183  002E                     checkRSSISampling@F9477:	
  1184  002E                     	ds	2
  1185  0030                     getModeFlags@F9473:	
  1186  0030                     	ds	2
  1187  0032                     getOperatingMode@F9464:	
  1188  0032                     	ds	2
  1189  0034                     getRSSIThreshold@F9460:	
  1190  0034                     	ds	2
  1191  0036                     getFifoFlags@F9456:	
  1192  0036                     	ds	2
  1193  0038                     getRSSI@F9452:	
  1194  0038                     	ds	2
  1195  003A                     setPreambleLength@F9437:	
  1196  003A                     	ds	2
  1197  003C                     checkForPayload@F9430:	
  1198  003C                     	ds	2
  1199  003E                     setModulationThreshold@F9426:	
  1200  003E                     	ds	2
  1201  0040                     setPacketFormat@F9415:	
  1202  0040                     	ds	2
  1203  0042                     _recommended_params:	
  1204  0042                     	ds	10
  1205                           
  1206                           	psect	bssBANK1
  1207  00EB                     __pbssBANK1:	
  1208  00EB                     _modeFlags:	
  1209  00EB                     	ds	1
  1210  00EC                     _fifoFlags:	
  1211  00EC                     	ds	1
  1212  00ED                     _RSSI:	
  1213  00ED                     	ds	1
  1214  00EE                     _operatingMode:	
  1215  00EE                     	ds	1
  1216                           
  1217                           	psect	dataBANK2
  1218  0120                     __pdataBANK2:	
  1219  0120                     main@F9389:	
  1220  0120                     	ds	75
  1221                           
  1222                           	psect	inittext
  1223  0394                     init_ram:	
  1224  0394  00FE               	movwf	126
  1225  0395                     initloop:	
  1226  0395  0012               	moviw fsr0++
  1227  0396  001E               	movwi fsr1++
  1228  0397  0BFE               	decfsz	126,f
  1229  0398  2B95               	goto	initloop
  1230  0399  3400               	retlw	0
  1231                           
  1232                           	psect	clrtext
  1233  038E                     clear_ram0:	
  1234                           ;	Called with FSR0 containing the base address, and
  1235                           ;	WREG with the size to clear
  1236                           
  1237  038E  0064               	clrwdt	;clear the watchdog before getting into this loop
  1238  038F                     clrloop0:	
  1239  038F  0180               	clrf	0	;clear RAM location pointed to by FSR
  1240  0390  3101               	addfsr 0,1
  1241  0391  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1242  0392  2B8F               	goto	clrloop0	;have we reached the end yet?
  1243  0393  3400               	retlw	0	;all done for this memory range, return
  1244                           
  1245                           	psect	cstackBANK1
  1246  00A0                     __pcstackBANK1:	
  1247  00A0                     main@radio:	
  1248                           
  1249                           ; 75 bytes @ 0x0
  1250  00A0                     	ds	75
  1251                           
  1252                           	psect	cstackCOMMON
  1253  0070                     __pcstackCOMMON:	
  1254  0070                     ?_rfmSetup:	
  1255  0070                     ?_spi_init_master:	
  1256                           ; 1 bytes @ 0x0
  1257                           
  1258  0070                     ??_spi_init_master:	
  1259                           ; 1 bytes @ 0x0
  1260                           
  1261  0070                     ?_initRadio:	
  1262                           ; 1 bytes @ 0x0
  1263                           
  1264  0070                     ?_getRSSI:	
  1265                           ; 1 bytes @ 0x0
  1266                           
  1267  0070                     ?_getFifoFlags:	
  1268                           ; 1 bytes @ 0x0
  1269                           
  1270  0070                     ?_getModeFlags:	
  1271                           ; 1 bytes @ 0x0
  1272                           
  1273  0070                     ?_getOperatingMode:	
  1274                           ; 1 bytes @ 0x0
  1275                           
  1276  0070                     ?_receivePayload:	
  1277                           ; 1 bytes @ 0x0
  1278                           
  1279  0070                     ?_setPinWithMask:	
  1280                           ; 1 bytes @ 0x0
  1281                           
  1282  0070                     ?_send:	
  1283                           ; 1 bytes @ 0x0
  1284                           
  1285  0070                     ?_resetRadio:	
  1286                           ; 1 bytes @ 0x0
  1287                           
  1288  0070                     ??_resetRadio:	
  1289                           ; 1 bytes @ 0x0
  1290                           
  1291  0070                     ?_setSyncWords:	
  1292                           ; 1 bytes @ 0x0
  1293                           
  1294  0070                     ?_setPacketLength:	
  1295                           ; 1 bytes @ 0x0
  1296                           
  1297  0070                     ?_setNodeAddress:	
  1298                           ; 1 bytes @ 0x0
  1299                           
  1300  0070                     ?_setRSSIThreshold:	
  1301                           ; 1 bytes @ 0x0
  1302                           
  1303  0070                     ?_setPacketFormat:	
  1304                           ; 1 bytes @ 0x0
  1305                           
  1306  0070                     ?_setRecommendedParams:	
  1307                           ; 1 bytes @ 0x0
  1308                           
  1309  0070                     ?_setModulationThreshold:	
  1310                           ; 1 bytes @ 0x0
  1311                           
  1312  0070                     ?_setPreambleLength:	
  1313                           ; 1 bytes @ 0x0
  1314                           
  1315  0070                     ?_init:	
  1316                           ; 1 bytes @ 0x0
  1317                           
  1318  0070                     ?_main:	
  1319                           ; 2 bytes @ 0x0
  1320                           
  1321  0070                     send@msg:	
  1322                           ; 2 bytes @ 0x0
  1323                           
  1324  0070                     setPinWithMask@pPort:	
  1325                           ; 1 bytes @ 0x0
  1326                           
  1327                           
  1328                           ; 2 bytes @ 0x0
  1329  0070                     	ds	1
  1330  0071                     ??_rfmSetup:	
  1331  0071                     ??_send:	
  1332                           ; 1 bytes @ 0x1
  1333                           
  1334                           
  1335                           ; 1 bytes @ 0x1
  1336  0071                     	ds	1
  1337  0072                     ??_init:	
  1338  0072                     setPinWithMask@iPin:	
  1339                           ; 1 bytes @ 0x2
  1340                           
  1341                           
  1342                           ; 1 bytes @ 0x2
  1343  0072                     	ds	1
  1344  0073                     send@radio:	
  1345  0073                     setPinWithMask@value:	
  1346                           ; 1 bytes @ 0x3
  1347                           
  1348                           
  1349                           ; 1 bytes @ 0x3
  1350  0073                     	ds	1
  1351  0074                     ??_setPinWithMask:	
  1352                           
  1353                           ; 1 bytes @ 0x4
  1354  0074                     	ds	2
  1355  0076                     ??_receivePayload:	
  1356  0076                     ?_sendBulk:	
  1357                           ; 1 bytes @ 0x6
  1358                           
  1359  0076                     sendBulk@msgs:	
  1360                           ; 1 bytes @ 0x6
  1361                           
  1362                           
  1363                           ; 1 bytes @ 0x6
  1364  0076                     	ds	1
  1365  0077                     sendBulk@len:	
  1366                           
  1367                           ; 1 bytes @ 0x7
  1368  0077                     	ds	1
  1369  0078                     ??_sendBulk:	
  1370  0078                     receivePayload@i:	
  1371                           ; 1 bytes @ 0x8
  1372                           
  1373                           
  1374                           ; 2 bytes @ 0x8
  1375  0078                     	ds	2
  1376  007A                     receivePayload@radio:	
  1377                           
  1378                           ; 1 bytes @ 0xA
  1379  007A                     	ds	2
  1380  007C                     ?_setPowerOutput:	
  1381  007C                     ?_setDiodeMapping:	
  1382                           ; 1 bytes @ 0xC
  1383                           
  1384  007C                     ?_setAutoMode:	
  1385                           ; 1 bytes @ 0xC
  1386                           
  1387  007C                     ?_setOperatingMode:	
  1388                           ; 1 bytes @ 0xC
  1389                           
  1390  007C                     ??_getRSSI:	
  1391                           ; 1 bytes @ 0xC
  1392                           
  1393  007C                     ??_getFifoFlags:	
  1394                           ; 1 bytes @ 0xC
  1395                           
  1396  007C                     ??_getModeFlags:	
  1397                           ; 1 bytes @ 0xC
  1398                           
  1399  007C                     ??_getOperatingMode:	
  1400                           ; 1 bytes @ 0xC
  1401                           
  1402  007C                     ??_sendPairs:	
  1403                           ; 1 bytes @ 0xC
  1404                           
  1405  007C                     ??_setSyncWords:	
  1406                           ; 1 bytes @ 0xC
  1407                           
  1408  007C                     ??_setPacketLength:	
  1409                           ; 1 bytes @ 0xC
  1410                           
  1411  007C                     ??_setNodeAddress:	
  1412                           ; 1 bytes @ 0xC
  1413                           
  1414  007C                     ??_setRSSIThreshold:	
  1415                           ; 1 bytes @ 0xC
  1416                           
  1417  007C                     ??_setPacketFormat:	
  1418                           ; 1 bytes @ 0xC
  1419                           
  1420  007C                     ??_setModulationThreshold:	
  1421                           ; 1 bytes @ 0xC
  1422                           
  1423  007C                     ??_setPreambleLength:	
  1424                           ; 1 bytes @ 0xC
  1425                           
  1426  007C                     setOperatingMode@operatingMode:	
  1427                           ; 1 bytes @ 0xC
  1428                           
  1429  007C                     setPowerOutput@powerSettings:	
  1430                           ; 1 bytes @ 0xC
  1431                           
  1432  007C                     setDiodeMapping@mapping:	
  1433                           ; 1 bytes @ 0xC
  1434                           
  1435  007C                     setAutoMode@autoModes:	
  1436                           ; 1 bytes @ 0xC
  1437                           
  1438                           
  1439                           ; 1 bytes @ 0xC
  1440  007C                     	ds	2
  1441  007E                     ??_initRadio:	
  1442                           
  1443                           	psect	cstackBANK0
  1444  004C                     __pcstackBANK0:	
  1445                           ; 1 bytes @ 0xE
  1446                           
  1447  004C                     sendBulk@i:	
  1448                           
  1449                           ; 2 bytes @ 0x0
  1450  004C                     	ds	2
  1451  004E                     sendBulk@radio:	
  1452                           
  1453                           ; 1 bytes @ 0x2
  1454  004E                     	ds	1
  1455  004F                     ??_setPowerOutput:	
  1456  004F                     ??_setDiodeMapping:	
  1457                           ; 1 bytes @ 0x3
  1458                           
  1459  004F                     ??_setAutoMode:	
  1460                           ; 1 bytes @ 0x3
  1461                           
  1462  004F                     ??_setOperatingMode:	
  1463                           ; 1 bytes @ 0x3
  1464                           
  1465  004F                     ?_sendPairs:	
  1466                           ; 1 bytes @ 0x3
  1467                           
  1468  004F                     sendPairs@msgs:	
  1469                           ; 1 bytes @ 0x3
  1470                           
  1471  004F                     getRSSI@radio:	
  1472                           ; 1 bytes @ 0x3
  1473                           
  1474  004F                     getFifoFlags@radio:	
  1475                           ; 1 bytes @ 0x3
  1476                           
  1477  004F                     getOperatingMode@radio:	
  1478                           ; 1 bytes @ 0x3
  1479                           
  1480  004F                     getModeFlags@radio:	
  1481                           ; 1 bytes @ 0x3
  1482                           
  1483  004F                     setPacketLength@msg:	
  1484                           ; 1 bytes @ 0x3
  1485                           
  1486  004F                     setNodeAddress@msg:	
  1487                           ; 2 bytes @ 0x3
  1488                           
  1489  004F                     setRSSIThreshold@msg:	
  1490                           ; 2 bytes @ 0x3
  1491                           
  1492  004F                     setPacketFormat@msg:	
  1493                           ; 2 bytes @ 0x3
  1494                           
  1495  004F                     setModulationThreshold@msg:	
  1496                           ; 2 bytes @ 0x3
  1497                           
  1498  004F                     setPreambleLength@msg:	
  1499                           ; 2 bytes @ 0x3
  1500                           
  1501  004F                     setSyncWords@msg:	
  1502                           ; 2 bytes @ 0x3
  1503                           
  1504                           
  1505                           ; 10 bytes @ 0x3
  1506  004F                     	ds	1
  1507  0050                     sendPairs@len:	
  1508  0050                     getRSSI@msg:	
  1509                           ; 2 bytes @ 0x4
  1510                           
  1511  0050                     getFifoFlags@msg:	
  1512                           ; 2 bytes @ 0x4
  1513                           
  1514  0050                     getOperatingMode@msg:	
  1515                           ; 2 bytes @ 0x4
  1516                           
  1517  0050                     getModeFlags@msg:	
  1518                           ; 2 bytes @ 0x4
  1519                           
  1520                           
  1521                           ; 2 bytes @ 0x4
  1522  0050                     	ds	1
  1523  0051                     setPacketLength@radio:	
  1524  0051                     setNodeAddress@radio:	
  1525                           ; 1 bytes @ 0x5
  1526                           
  1527  0051                     setRSSIThreshold@radio:	
  1528                           ; 1 bytes @ 0x5
  1529                           
  1530  0051                     setPacketFormat@radio:	
  1531                           ; 1 bytes @ 0x5
  1532                           
  1533  0051                     setOperatingMode@radio:	
  1534                           ; 1 bytes @ 0x5
  1535                           
  1536  0051                     setModulationThreshold@radio:	
  1537                           ; 1 bytes @ 0x5
  1538                           
  1539  0051                     setPreambleLength@radio:	
  1540                           ; 1 bytes @ 0x5
  1541                           
  1542  0051                     setPowerOutput@radio:	
  1543                           ; 1 bytes @ 0x5
  1544                           
  1545  0051                     setDiodeMapping@radio:	
  1546                           ; 1 bytes @ 0x5
  1547                           
  1548  0051                     setAutoMode@radio:	
  1549                           ; 1 bytes @ 0x5
  1550                           
  1551                           
  1552                           ; 1 bytes @ 0x5
  1553  0051                     	ds	1
  1554  0052                     sendPairs@radio:	
  1555  0052                     setOperatingMode@msg:	
  1556                           ; 1 bytes @ 0x6
  1557                           
  1558  0052                     setPowerOutput@msg:	
  1559                           ; 2 bytes @ 0x6
  1560                           
  1561  0052                     setDiodeMapping@msg:	
  1562                           ; 2 bytes @ 0x6
  1563                           
  1564  0052                     setAutoMode@msg:	
  1565                           ; 2 bytes @ 0x6
  1566                           
  1567                           
  1568                           ; 2 bytes @ 0x6
  1569  0052                     	ds	1
  1570  0053                     sendPairs@msg:	
  1571                           
  1572                           ; 2 bytes @ 0x7
  1573  0053                     	ds	2
  1574  0055                     sendPairs@i:	
  1575                           
  1576                           ; 2 bytes @ 0x9
  1577  0055                     	ds	2
  1578  0057                     ??_setRecommendedParams:	
  1579                           
  1580                           ; 1 bytes @ 0xB
  1581  0057                     	ds	1
  1582  0058                     setRecommendedParams@radio:	
  1583                           
  1584                           ; 1 bytes @ 0xC
  1585  0058                     	ds	1
  1586  0059                     setSyncWords@radio:	
  1587                           
  1588                           ; 1 bytes @ 0xD
  1589  0059                     	ds	1
  1590  005A                     setSyncWords@i:	
  1591                           
  1592                           ; 2 bytes @ 0xE
  1593  005A                     	ds	2
  1594  005C                     initRadio@radio:	
  1595                           
  1596                           ; 1 bytes @ 0x10
  1597  005C                     	ds	1
  1598  005D                     ??_main:	
  1599                           
  1600                           ; 1 bytes @ 0x11
  1601  005D                     	ds	1
  1602                           
  1603                           	psect	maintext
  1604  0766                     __pmaintext:	
  1605 ;;
  1606 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1607 ;;
  1608 ;; *************** function _main *****************
  1609 ;; Defined at:
  1610 ;;		line 82 in file "receiver.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;		None
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;  radio          75    0[BANK1 ] struct RFM69HCW
  1615 ;; Return value:  Size  Location     Type
  1616 ;;                  2   79[None  ] int 
  1617 ;; Registers used:
  1618 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1619 ;; Tracked objects:
  1620 ;;		On entry : B1F/0
  1621 ;;		On exit  : 0/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1625 ;;      Locals:         0       0      75       0       0       0       0       0       0       0       0       0       
      +0       0
  1626 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1627 ;;      Totals:         0       1      75       0       0       0       0       0       0       0       0       0       
      +0       0
  1628 ;;Total ram usage:       76 bytes
  1629 ;; Hardware stack levels required when called:    5
  1630 ;; This function calls:
  1631 ;;		_getFifoFlags
  1632 ;;		_getModeFlags
  1633 ;;		_getOperatingMode
  1634 ;;		_getRSSI
  1635 ;;		_init
  1636 ;;		_initRadio
  1637 ;;		_receivePayload
  1638 ;;		_setAutoMode
  1639 ;;		_setDiodeMapping
  1640 ;;		_setOperatingMode
  1641 ;;		_setPowerOutput
  1642 ;; This function is called by:
  1643 ;;		Startup code after reset
  1644 ;; This function uses a non-reentrant model
  1645 ;;
  1646                           
  1647                           
  1648                           ;psect for function _main
  1649  0766                     _main:	
  1650                           
  1651                           ;receiver.c: 83:     TRISAbits.TRISA4=1;
  1652                           
  1653                           ;incstack = 0
  1654                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1655  0766  0021               	movlb	1	; select bank1
  1656  0767  160C               	bsf	12,4	;volatile
  1657                           
  1658                           ;receiver.c: 84:     TRISAbits.TRISA5=1;
  1659  0768  168C               	bsf	12,5	;volatile
  1660                           
  1661                           ;receiver.c: 85:     init();
  1662  0769  3183  238B  3187   	fcall	_init
  1663                           
  1664                           ;receiver.c: 86:     RFM69 radio = {.SSport=&PORTA, .SSbit=2, .node_address=0x20,.packet
      +                          _length=0x08,
  1665  076C  3020               	movlw	low main@F9389
  1666  076D  0086               	movwf	6
  1667  076E  3001               	movlw	high main@F9389
  1668  076F  0087               	movwf	7
  1669  0770  30A0               	movlw	low main@radio
  1670  0771  0084               	movwf	4
  1671  0772  3000               	movlw	high main@radio
  1672  0773  0085               	movwf	5
  1673  0774  304B               	movlw	75
  1674  0775  0020               	movlb	0	; select bank0
  1675  0776  00DD               	movwf	??_main
  1676  0777                     u280:	
  1677  0777  0016               	moviw fsr1++
  1678  0778  001A               	movwi fsr0++
  1679  0779  0BDD               	decfsz	??_main,f
  1680  077A  2F77               	goto	u280
  1681                           
  1682                           ;receiver.c: 88:     initRadio(&radio);
  1683  077B  30A0               	movlw	(low (main@radio| 0))& (0+255)
  1684  077C  3185  2554  3187   	fcall	_initRadio
  1685                           
  1686                           ;receiver.c: 89:     setPowerOutput(&radio, 0x5F);
  1687  077F  305F               	movlw	95
  1688  0780  0020               	movlb	0	; select bank0
  1689  0781  00DD               	movwf	??_main
  1690  0782  085D               	movf	??_main,w
  1691  0783  00FC               	movwf	setPowerOutput@powerSettings
  1692  0784  30A0               	movlw	(low (main@radio| 0))& (0+255)
  1693  0785  3184  248B  3187   	fcall	_setPowerOutput
  1694                           
  1695                           ;receiver.c: 90:     setDiodeMapping(&radio, 0x40);
  1696  0788  3040               	movlw	64
  1697  0789  0020               	movlb	0	; select bank0
  1698  078A  00DD               	movwf	??_main
  1699  078B  085D               	movf	??_main,w
  1700  078C  00FC               	movwf	setDiodeMapping@mapping
  1701  078D  30A0               	movlw	(low (main@radio| 0))& (0+255)
  1702  078E  3184  245B  3187   	fcall	_setDiodeMapping
  1703                           
  1704                           ;receiver.c: 92:     setAutoMode(&radio, 0b01100100);
  1705  0791  3064               	movlw	100
  1706  0792  0020               	movlb	0	; select bank0
  1707  0793  00DD               	movwf	??_main
  1708  0794  085D               	movf	??_main,w
  1709  0795  00FC               	movwf	setAutoMode@autoModes
  1710  0796  30A0               	movlw	(low (main@radio| 0))& (0+255)
  1711  0797  3184  2443  3187   	fcall	_setAutoMode
  1712                           
  1713                           ;receiver.c: 93:     setOperatingMode(&radio, 0xB0);
  1714  079A  30B0               	movlw	176
  1715  079B  0020               	movlb	0	; select bank0
  1716  079C  00DD               	movwf	??_main
  1717  079D  085D               	movf	??_main,w
  1718  079E  00FC               	movwf	setOperatingMode@operatingMode
  1719  079F  30A0               	movlw	(low (main@radio| 0))& (0+255)
  1720  07A0  3184  2473  3187   	fcall	_setOperatingMode
  1721  07A3                     l1339:	
  1722                           
  1723                           ;receiver.c: 95:         RSSI = getRSSI(&radio);
  1724  07A3  30A0               	movlw	(low (main@radio| 0))& (0+255)
  1725  07A4  3184  241A  3187   	fcall	_getRSSI
  1726  07A7  0020               	movlb	0	; select bank0
  1727  07A8  00DD               	movwf	??_main
  1728  07A9  085D               	movf	??_main,w
  1729  07AA  0021               	movlb	1	; select bank1
  1730  07AB  00ED               	movwf	_RSSI^(0+128)
  1731                           
  1732                           ;receiver.c: 96:         fifoFlags = getFifoFlags(&radio);
  1733  07AC  30A0               	movlw	(low (main@radio| 0))& (0+255)
  1734  07AD  3183  23DE  3187   	fcall	_getFifoFlags
  1735  07B0  0020               	movlb	0	; select bank0
  1736  07B1  00DD               	movwf	??_main
  1737  07B2  085D               	movf	??_main,w
  1738  07B3  0021               	movlb	1	; select bank1
  1739  07B4  00EC               	movwf	_fifoFlags^(0+128)
  1740                           
  1741                           ;receiver.c: 97:         modeFlags = getModeFlags(&radio);
  1742  07B5  30A0               	movlw	(low (main@radio| 0))& (0+255)
  1743  07B6  3183  23F2  3187   	fcall	_getModeFlags
  1744  07B9  0020               	movlb	0	; select bank0
  1745  07BA  00DD               	movwf	??_main
  1746  07BB  085D               	movf	??_main,w
  1747  07BC  0021               	movlb	1	; select bank1
  1748  07BD  00EB               	movwf	_modeFlags^(0+128)
  1749                           
  1750                           ;receiver.c: 98:         operatingMode = getOperatingMode(&radio);
  1751  07BE  30A0               	movlw	(low (main@radio| 0))& (0+255)
  1752  07BF  3184  2406  3187   	fcall	_getOperatingMode
  1753  07C2  0020               	movlb	0	; select bank0
  1754  07C3  00DD               	movwf	??_main
  1755  07C4  085D               	movf	??_main,w
  1756  07C5  0021               	movlb	1	; select bank1
  1757  07C6  00EE               	movwf	_operatingMode^(0+128)
  1758                           
  1759                           ;receiver.c: 99:         if((((operatingMode & 0x7F) == 0))){
  1760  07C7  086E               	movf	_operatingMode^(0+128),w
  1761  07C8  397F               	andlw	127
  1762  07C9  1D03               	btfss	3,2
  1763  07CA  2FA3               	goto	l1339
  1764                           
  1765                           ;receiver.c: 100:             receivePayload(&radio);
  1766  07CB  30A0               	movlw	(low (main@radio| 0))& (0+255)
  1767  07CC  3186  26B8  3187   	fcall	_receivePayload
  1768                           
  1769                           ;receiver.c: 101:             _delay((unsigned long)((20)*(16000000/4000.0)));
  1770  07CF  3068               	movlw	104
  1771  07D0  0020               	movlb	0	; select bank0
  1772  07D1  00DD               	movwf	??_main
  1773  07D2  30E4               	movlw	228
  1774  07D3                     u317:	
  1775  07D3  0B89               	decfsz	9,f
  1776  07D4  2FD3               	goto	u317
  1777  07D5  0BDD               	decfsz	??_main,f
  1778  07D6  2FD3               	goto	u317
  1779  07D7  0000               	nop
  1780  07D8  2FA3               	goto	l1339
  1781  07D9                     __end_of_main:	
  1782                           
  1783                           	psect	text1
  1784  048B                     __ptext1:	
  1785 ;; *************** function _setPowerOutput *****************
  1786 ;; Defined at:
  1787 ;;		line 122 in file "RFM69HCW.c"
  1788 ;; Parameters:    Size  Location     Type
  1789 ;;  radio           1    wreg     PTR struct RFM69HCW
  1790 ;;		 -> main@radio(75), 
  1791 ;;  powerSetting    1   12[COMMON] unsigned char 
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;  radio           1    5[BANK0 ] PTR struct RFM69HCW
  1794 ;;		 -> main@radio(75), 
  1795 ;;  msg             2    6[BANK0 ] unsigned char [2]
  1796 ;; Return value:  Size  Location     Type
  1797 ;;                  1    wreg      void 
  1798 ;; Registers used:
  1799 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1800 ;; Tracked objects:
  1801 ;;		On entry : 0/0
  1802 ;;		On exit  : 0/0
  1803 ;;		Unchanged: 0/0
  1804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1805 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1806 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1807 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1808 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1809 ;;Total ram usage:        6 bytes
  1810 ;; Hardware stack levels used:    1
  1811 ;; Hardware stack levels required when called:    2
  1812 ;; This function calls:
  1813 ;;		_sendBulk
  1814 ;; This function is called by:
  1815 ;;		_main
  1816 ;; This function uses a non-reentrant model
  1817 ;;
  1818                           
  1819                           
  1820                           ;psect for function _setPowerOutput
  1821  048B                     _setPowerOutput:	
  1822                           
  1823                           ;incstack = 0
  1824                           ; Regs used in _setPowerOutput: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1825                           ;setPowerOutput@radio stored from wreg
  1826  048B  0020               	movlb	0	; select bank0
  1827  048C  00D1               	movwf	setPowerOutput@radio
  1828                           
  1829                           ;RFM69HCW.c: 123:     byte msg[] = {0x11|0x80, powerSettings};
  1830  048D  01D2               	clrf	setPowerOutput@msg
  1831  048E  01D3               	clrf	setPowerOutput@msg+1
  1832  048F  3091               	movlw	145
  1833  0490  00CF               	movwf	??_setPowerOutput
  1834  0491  084F               	movf	??_setPowerOutput,w
  1835  0492  00D2               	movwf	setPowerOutput@msg
  1836  0493  087C               	movf	setPowerOutput@powerSettings,w
  1837  0494  00CF               	movwf	??_setPowerOutput
  1838  0495  084F               	movf	??_setPowerOutput,w
  1839  0496  00D3               	movwf	setPowerOutput@msg+1
  1840                           
  1841                           ;RFM69HCW.c: 124:     sendBulk(radio,msg,2);
  1842  0497  3052               	movlw	(low (setPowerOutput@msg| 0))& (0+255)
  1843  0498  00CF               	movwf	??_setPowerOutput
  1844  0499  084F               	movf	??_setPowerOutput,w
  1845  049A  00F6               	movwf	sendBulk@msgs
  1846  049B  3002               	movlw	2
  1847  049C  00D0               	movwf	??_setPowerOutput+1
  1848  049D  0850               	movf	??_setPowerOutput+1,w
  1849  049E  00F7               	movwf	sendBulk@len
  1850  049F  0851               	movf	setPowerOutput@radio,w
  1851  04A0  3187  270C         	fcall	_sendBulk
  1852  04A2  0008               	return
  1853  04A3                     __end_of_setPowerOutput:	
  1854                           
  1855                           	psect	text2
  1856  0473                     __ptext2:	
  1857 ;; *************** function _setOperatingMode *****************
  1858 ;; Defined at:
  1859 ;;		line 77 in file "RFM69HCW.c"
  1860 ;; Parameters:    Size  Location     Type
  1861 ;;  radio           1    wreg     PTR struct RFM69HCW
  1862 ;;		 -> main@radio(75), 
  1863 ;;  operatingMod    1   12[COMMON] unsigned char 
  1864 ;; Auto vars:     Size  Location     Type
  1865 ;;  radio           1    5[BANK0 ] PTR struct RFM69HCW
  1866 ;;		 -> main@radio(75), 
  1867 ;;  msg             2    6[BANK0 ] unsigned char [2]
  1868 ;; Return value:  Size  Location     Type
  1869 ;;                  1    wreg      void 
  1870 ;; Registers used:
  1871 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1872 ;; Tracked objects:
  1873 ;;		On entry : 0/0
  1874 ;;		On exit  : 0/0
  1875 ;;		Unchanged: 0/0
  1876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1877 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1878 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1879 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1880 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1881 ;;Total ram usage:        6 bytes
  1882 ;; Hardware stack levels used:    1
  1883 ;; Hardware stack levels required when called:    2
  1884 ;; This function calls:
  1885 ;;		_sendBulk
  1886 ;; This function is called by:
  1887 ;;		_main
  1888 ;; This function uses a non-reentrant model
  1889 ;;
  1890                           
  1891                           
  1892                           ;psect for function _setOperatingMode
  1893  0473                     _setOperatingMode:	
  1894                           
  1895                           ;incstack = 0
  1896                           ; Regs used in _setOperatingMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1897                           ;setOperatingMode@radio stored from wreg
  1898  0473  0020               	movlb	0	; select bank0
  1899  0474  00D1               	movwf	setOperatingMode@radio
  1900                           
  1901                           ;RFM69HCW.c: 78:     byte msg[] = {0x01|0x80, operatingMode};
  1902  0475  01D2               	clrf	setOperatingMode@msg
  1903  0476  01D3               	clrf	setOperatingMode@msg+1
  1904  0477  3081               	movlw	129
  1905  0478  00CF               	movwf	??_setOperatingMode
  1906  0479  084F               	movf	??_setOperatingMode,w
  1907  047A  00D2               	movwf	setOperatingMode@msg
  1908  047B  087C               	movf	setOperatingMode@operatingMode,w
  1909  047C  00CF               	movwf	??_setOperatingMode
  1910  047D  084F               	movf	??_setOperatingMode,w
  1911  047E  00D3               	movwf	setOperatingMode@msg+1
  1912                           
  1913                           ;RFM69HCW.c: 79:     sendBulk(radio, msg, 2);
  1914  047F  3052               	movlw	(low (setOperatingMode@msg| 0))& (0+255)
  1915  0480  00CF               	movwf	??_setOperatingMode
  1916  0481  084F               	movf	??_setOperatingMode,w
  1917  0482  00F6               	movwf	sendBulk@msgs
  1918  0483  3002               	movlw	2
  1919  0484  00D0               	movwf	??_setOperatingMode+1
  1920  0485  0850               	movf	??_setOperatingMode+1,w
  1921  0486  00F7               	movwf	sendBulk@len
  1922  0487  0851               	movf	setOperatingMode@radio,w
  1923  0488  3187  270C         	fcall	_sendBulk
  1924  048A  0008               	return
  1925  048B                     __end_of_setOperatingMode:	
  1926                           
  1927                           	psect	text3
  1928  045B                     __ptext3:	
  1929 ;; *************** function _setDiodeMapping *****************
  1930 ;; Defined at:
  1931 ;;		line 160 in file "RFM69HCW.c"
  1932 ;; Parameters:    Size  Location     Type
  1933 ;;  radio           1    wreg     PTR struct RFM69HCW
  1934 ;;		 -> main@radio(75), 
  1935 ;;  mapping         1   12[COMMON] unsigned char 
  1936 ;; Auto vars:     Size  Location     Type
  1937 ;;  radio           1    5[BANK0 ] PTR struct RFM69HCW
  1938 ;;		 -> main@radio(75), 
  1939 ;;  msg             2    6[BANK0 ] unsigned char [2]
  1940 ;; Return value:  Size  Location     Type
  1941 ;;                  1    wreg      void 
  1942 ;; Registers used:
  1943 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1949 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1950 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1951 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1952 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1953 ;;Total ram usage:        6 bytes
  1954 ;; Hardware stack levels used:    1
  1955 ;; Hardware stack levels required when called:    2
  1956 ;; This function calls:
  1957 ;;		_sendBulk
  1958 ;; This function is called by:
  1959 ;;		_main
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           
  1964                           ;psect for function _setDiodeMapping
  1965  045B                     _setDiodeMapping:	
  1966                           
  1967                           ;incstack = 0
  1968                           ; Regs used in _setDiodeMapping: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1969                           ;setDiodeMapping@radio stored from wreg
  1970  045B  0020               	movlb	0	; select bank0
  1971  045C  00D1               	movwf	setDiodeMapping@radio
  1972                           
  1973                           ;RFM69HCW.c: 161:     byte msg[]={0x25, mapping};
  1974  045D  01D2               	clrf	setDiodeMapping@msg
  1975  045E  01D3               	clrf	setDiodeMapping@msg+1
  1976  045F  3025               	movlw	37
  1977  0460  00CF               	movwf	??_setDiodeMapping
  1978  0461  084F               	movf	??_setDiodeMapping,w
  1979  0462  00D2               	movwf	setDiodeMapping@msg
  1980  0463  087C               	movf	setDiodeMapping@mapping,w
  1981  0464  00CF               	movwf	??_setDiodeMapping
  1982  0465  084F               	movf	??_setDiodeMapping,w
  1983  0466  00D3               	movwf	setDiodeMapping@msg+1
  1984                           
  1985                           ;RFM69HCW.c: 162:     sendBulk(radio, msg, 2);
  1986  0467  3052               	movlw	(low (setDiodeMapping@msg| 0))& (0+255)
  1987  0468  00CF               	movwf	??_setDiodeMapping
  1988  0469  084F               	movf	??_setDiodeMapping,w
  1989  046A  00F6               	movwf	sendBulk@msgs
  1990  046B  3002               	movlw	2
  1991  046C  00D0               	movwf	??_setDiodeMapping+1
  1992  046D  0850               	movf	??_setDiodeMapping+1,w
  1993  046E  00F7               	movwf	sendBulk@len
  1994  046F  0851               	movf	setDiodeMapping@radio,w
  1995  0470  3187  270C         	fcall	_sendBulk
  1996  0472  0008               	return
  1997  0473                     __end_of_setDiodeMapping:	
  1998                           
  1999                           	psect	text4
  2000  0443                     __ptext4:	
  2001 ;; *************** function _setAutoMode *****************
  2002 ;; Defined at:
  2003 ;;		line 196 in file "RFM69HCW.c"
  2004 ;; Parameters:    Size  Location     Type
  2005 ;;  radio           1    wreg     PTR struct RFM69HCW
  2006 ;;		 -> main@radio(75), 
  2007 ;;  autoModes       1   12[COMMON] unsigned char 
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;  radio           1    5[BANK0 ] PTR struct RFM69HCW
  2010 ;;		 -> main@radio(75), 
  2011 ;;  msg             2    6[BANK0 ] unsigned char [2]
  2012 ;; Return value:  Size  Location     Type
  2013 ;;                  1    wreg      void 
  2014 ;; Registers used:
  2015 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2016 ;; Tracked objects:
  2017 ;;		On entry : 0/0
  2018 ;;		On exit  : 0/0
  2019 ;;		Unchanged: 0/0
  2020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2021 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2022 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2023 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2024 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2025 ;;Total ram usage:        6 bytes
  2026 ;; Hardware stack levels used:    1
  2027 ;; Hardware stack levels required when called:    2
  2028 ;; This function calls:
  2029 ;;		_sendBulk
  2030 ;; This function is called by:
  2031 ;;		_main
  2032 ;; This function uses a non-reentrant model
  2033 ;;
  2034                           
  2035                           
  2036                           ;psect for function _setAutoMode
  2037  0443                     _setAutoMode:	
  2038                           
  2039                           ;incstack = 0
  2040                           ; Regs used in _setAutoMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2041                           ;setAutoMode@radio stored from wreg
  2042  0443  0020               	movlb	0	; select bank0
  2043  0444  00D1               	movwf	setAutoMode@radio
  2044                           
  2045                           ;RFM69HCW.c: 197:     byte msg[]={0x3B|0x80, autoModes};
  2046  0445  01D2               	clrf	setAutoMode@msg
  2047  0446  01D3               	clrf	setAutoMode@msg+1
  2048  0447  30BB               	movlw	187
  2049  0448  00CF               	movwf	??_setAutoMode
  2050  0449  084F               	movf	??_setAutoMode,w
  2051  044A  00D2               	movwf	setAutoMode@msg
  2052  044B  087C               	movf	setAutoMode@autoModes,w
  2053  044C  00CF               	movwf	??_setAutoMode
  2054  044D  084F               	movf	??_setAutoMode,w
  2055  044E  00D3               	movwf	setAutoMode@msg+1
  2056                           
  2057                           ;RFM69HCW.c: 198:     sendBulk(radio, msg, 2);
  2058  044F  3052               	movlw	(low (setAutoMode@msg| 0))& (0+255)
  2059  0450  00CF               	movwf	??_setAutoMode
  2060  0451  084F               	movf	??_setAutoMode,w
  2061  0452  00F6               	movwf	sendBulk@msgs
  2062  0453  3002               	movlw	2
  2063  0454  00D0               	movwf	??_setAutoMode+1
  2064  0455  0850               	movf	??_setAutoMode+1,w
  2065  0456  00F7               	movwf	sendBulk@len
  2066  0457  0851               	movf	setAutoMode@radio,w
  2067  0458  3187  270C         	fcall	_sendBulk
  2068  045A  0008               	return
  2069  045B                     __end_of_setAutoMode:	
  2070                           
  2071                           	psect	text5
  2072  06B8                     __ptext5:	
  2073 ;; *************** function _receivePayload *****************
  2074 ;; Defined at:
  2075 ;;		line 97 in file "RFM69HCW.c"
  2076 ;; Parameters:    Size  Location     Type
  2077 ;;  radio           1    wreg     PTR struct RFM69HCW
  2078 ;;		 -> main@radio(75), 
  2079 ;; Auto vars:     Size  Location     Type
  2080 ;;  radio           1   10[COMMON] PTR struct RFM69HCW
  2081 ;;		 -> main@radio(75), 
  2082 ;;  i               2    8[COMMON] int 
  2083 ;; Return value:  Size  Location     Type
  2084 ;;                  1    wreg      void 
  2085 ;; Registers used:
  2086 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2087 ;; Tracked objects:
  2088 ;;		On entry : 0/0
  2089 ;;		On exit  : 0/0
  2090 ;;		Unchanged: 0/0
  2091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2093 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2094 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2095 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2096 ;;Total ram usage:        5 bytes
  2097 ;; Hardware stack levels used:    1
  2098 ;; Hardware stack levels required when called:    1
  2099 ;; This function calls:
  2100 ;;		_send
  2101 ;;		_setPinWithMask
  2102 ;; This function is called by:
  2103 ;;		_main
  2104 ;; This function uses a non-reentrant model
  2105 ;;
  2106                           
  2107                           
  2108                           ;psect for function _receivePayload
  2109  06B8                     _receivePayload:	
  2110                           
  2111                           ;incstack = 0
  2112                           ; Regs used in _receivePayload: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2113                           ;receivePayload@radio stored from wreg
  2114  06B8  00FA               	movwf	receivePayload@radio
  2115                           
  2116                           ;RFM69HCW.c: 98:     setPinWithMask(radio->SSport, radio->SSbit,0);
  2117  06B9  087A               	movf	receivePayload@radio,w
  2118  06BA  3E28               	addlw	40
  2119  06BB  0086               	movwf	6
  2120  06BC  0187               	clrf	7
  2121  06BD  3F40               	moviw [0]fsr1
  2122  06BE  00F0               	movwf	setPinWithMask@pPort
  2123  06BF  3F41               	moviw [1]fsr1
  2124  06C0  00F1               	movwf	setPinWithMask@pPort+1
  2125  06C1  087A               	movf	receivePayload@radio,w
  2126  06C2  3E2A               	addlw	42
  2127  06C3  0086               	movwf	6
  2128  06C4  0187               	clrf	7
  2129  06C5  0801               	movf	1,w
  2130  06C6  00F6               	movwf	??_receivePayload
  2131  06C7  0876               	movf	??_receivePayload,w
  2132  06C8  00F2               	movwf	setPinWithMask@iPin
  2133  06C9  01F3               	clrf	setPinWithMask@value
  2134  06CA  3185  2530  3186   	fcall	_setPinWithMask
  2135                           
  2136                           ;RFM69HCW.c: 99:     send(radio, 0x00);
  2137  06CD  01F0               	clrf	send@msg
  2138  06CE  087A               	movf	receivePayload@radio,w
  2139  06CF  3186  2625  3186   	fcall	_send
  2140                           
  2141                           ;RFM69HCW.c: 100:     for(int i=0;i<(*radio).packet_length;i++){
  2142  06D2  01F8               	clrf	receivePayload@i
  2143  06D3  01F9               	clrf	receivePayload@i+1
  2144  06D4                     l1319:	
  2145  06D4  087A               	movf	receivePayload@radio,w
  2146  06D5  3E2B               	addlw	43
  2147  06D6  0086               	movwf	6
  2148  06D7  0187               	clrf	7
  2149  06D8  0879               	movf	receivePayload@i+1,w
  2150  06D9  3A80               	xorlw	128
  2151  06DA  00F6               	movwf	??_receivePayload
  2152  06DB  3080               	movlw	128
  2153  06DC  0276               	subwf	??_receivePayload,w
  2154  06DD  1D03               	skipz
  2155  06DE  2EE1               	goto	u275
  2156  06DF  0801               	movf	1,w
  2157  06E0  0278               	subwf	receivePayload@i,w
  2158  06E1                     u275:	
  2159  06E1  1803               	btfsc	3,0
  2160  06E2  2EF7               	goto	l1321
  2161                           
  2162                           ;RFM69HCW.c: 101:         radio->payload[i]=send(radio,0x00);
  2163  06E3  01F0               	clrf	send@msg
  2164  06E4  087A               	movf	receivePayload@radio,w
  2165  06E5  3186  2625  3186   	fcall	_send
  2166  06E8  00F6               	movwf	??_receivePayload
  2167  06E9  0878               	movf	receivePayload@i,w
  2168  06EA  077A               	addwf	receivePayload@radio,w
  2169  06EB  00F7               	movwf	??_receivePayload+1
  2170  06EC  0877               	movf	??_receivePayload+1,w
  2171  06ED  3E2C               	addlw	44
  2172  06EE  0086               	movwf	6
  2173  06EF  0187               	clrf	7
  2174  06F0  0876               	movf	??_receivePayload,w
  2175  06F1  0081               	movwf	1
  2176                           
  2177                           ;RFM69HCW.c: 102:     }
  2178  06F2  3001               	movlw	1
  2179  06F3  07F8               	addwf	receivePayload@i,f
  2180  06F4  3000               	movlw	0
  2181  06F5  3DF9               	addwfc	receivePayload@i+1,f
  2182  06F6  2ED4               	goto	l1319
  2183  06F7                     l1321:	
  2184                           
  2185                           ;RFM69HCW.c: 103:     setPinWithMask(radio->SSport, radio->SSbit,1);
  2186  06F7  087A               	movf	receivePayload@radio,w
  2187  06F8  3E28               	addlw	40
  2188  06F9  0086               	movwf	6
  2189  06FA  0187               	clrf	7
  2190  06FB  3F40               	moviw [0]fsr1
  2191  06FC  00F0               	movwf	setPinWithMask@pPort
  2192  06FD  3F41               	moviw [1]fsr1
  2193  06FE  00F1               	movwf	setPinWithMask@pPort+1
  2194  06FF  087A               	movf	receivePayload@radio,w
  2195  0700  3E2A               	addlw	42
  2196  0701  0086               	movwf	6
  2197  0702  0187               	clrf	7
  2198  0703  0801               	movf	1,w
  2199  0704  00F6               	movwf	??_receivePayload
  2200  0705  0876               	movf	??_receivePayload,w
  2201  0706  00F2               	movwf	setPinWithMask@iPin
  2202  0707  01F3               	clrf	setPinWithMask@value
  2203  0708  0AF3               	incf	setPinWithMask@value,f
  2204  0709  3185  2530         	fcall	_setPinWithMask
  2205  070B  0008               	return
  2206  070C                     __end_of_receivePayload:	
  2207                           
  2208                           	psect	text6
  2209  0554                     __ptext6:	
  2210 ;; *************** function _initRadio *****************
  2211 ;; Defined at:
  2212 ;;		line 111 in file "RFM69HCW.c"
  2213 ;; Parameters:    Size  Location     Type
  2214 ;;  radio           1    wreg     PTR struct RFM69HCW
  2215 ;;		 -> main@radio(75), 
  2216 ;; Auto vars:     Size  Location     Type
  2217 ;;  radio           1   16[BANK0 ] PTR struct RFM69HCW
  2218 ;;		 -> main@radio(75), 
  2219 ;; Return value:  Size  Location     Type
  2220 ;;                  1    wreg      void 
  2221 ;; Registers used:
  2222 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2223 ;; Tracked objects:
  2224 ;;		On entry : 0/0
  2225 ;;		On exit  : 0/0
  2226 ;;		Unchanged: 0/0
  2227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2229 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2231 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2232 ;;Total ram usage:        1 bytes
  2233 ;; Hardware stack levels used:    1
  2234 ;; Hardware stack levels required when called:    4
  2235 ;; This function calls:
  2236 ;;		_setModulationThreshold
  2237 ;;		_setNodeAddress
  2238 ;;		_setPacketFormat
  2239 ;;		_setPacketLength
  2240 ;;		_setPreambleLength
  2241 ;;		_setRSSIThreshold
  2242 ;;		_setRecommendedParams
  2243 ;;		_setSyncWords
  2244 ;; This function is called by:
  2245 ;;		_main
  2246 ;; This function uses a non-reentrant model
  2247 ;;
  2248                           
  2249                           
  2250                           ;psect for function _initRadio
  2251  0554                     _initRadio:	
  2252                           
  2253                           ;incstack = 0
  2254                           ; Regs used in _initRadio: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2255                           ;initRadio@radio stored from wreg
  2256  0554  0020               	movlb	0	; select bank0
  2257  0555  00DC               	movwf	initRadio@radio
  2258                           
  2259                           ;RFM69HCW.c: 112:     setSyncWords(radio);
  2260  0556  085C               	movf	initRadio@radio,w
  2261  0557  3185  25A9  3185   	fcall	_setSyncWords
  2262                           
  2263                           ;RFM69HCW.c: 113:     setPacketLength(radio);
  2264  055A  0020               	movlb	0	; select bank0
  2265  055B  085C               	movf	initRadio@radio,w
  2266  055C  3184  24DB  3185   	fcall	_setPacketLength
  2267                           
  2268                           ;RFM69HCW.c: 114:     setNodeAddress(radio);
  2269  055F  0020               	movlb	0	; select bank0
  2270  0560  085C               	movf	initRadio@radio,w
  2271  0561  3184  24BF  3185   	fcall	_setNodeAddress
  2272                           
  2273                           ;RFM69HCW.c: 115:     setRSSIThreshold(radio);
  2274  0564  0020               	movlb	0	; select bank0
  2275  0565  085C               	movf	initRadio@radio,w
  2276  0566  3184  24F7  3185   	fcall	_setRSSIThreshold
  2277                           
  2278                           ;RFM69HCW.c: 116:     setPacketFormat(radio);
  2279  0569  0020               	movlb	0	; select bank0
  2280  056A  085C               	movf	initRadio@radio,w
  2281  056B  3183  23BA  3185   	fcall	_setPacketFormat
  2282                           
  2283                           ;RFM69HCW.c: 117:     setRecommendedParams(radio);
  2284  056E  0020               	movlb	0	; select bank0
  2285  056F  085C               	movf	initRadio@radio,w
  2286  0570  3183  239A  3185   	fcall	_setRecommendedParams
  2287                           
  2288                           ;RFM69HCW.c: 118:     setModulationThreshold(radio);
  2289  0573  0020               	movlb	0	; select bank0
  2290  0574  085C               	movf	initRadio@radio,w
  2291  0575  3183  23A8  3185   	fcall	_setModulationThreshold
  2292                           
  2293                           ;RFM69HCW.c: 119:     setPreambleLength(radio);
  2294  0578  0020               	movlb	0	; select bank0
  2295  0579  085C               	movf	initRadio@radio,w
  2296  057A  3183  23CC         	fcall	_setPreambleLength
  2297  057C  0008               	return
  2298  057D                     __end_of_initRadio:	
  2299                           
  2300                           	psect	text7
  2301  05A9                     __ptext7:	
  2302 ;; *************** function _setSyncWords *****************
  2303 ;; Defined at:
  2304 ;;		line 48 in file "RFM69HCW.c"
  2305 ;; Parameters:    Size  Location     Type
  2306 ;;  radio           1    wreg     PTR struct RFM69HCW
  2307 ;;		 -> main@radio(75), 
  2308 ;; Auto vars:     Size  Location     Type
  2309 ;;  radio           1   13[BANK0 ] PTR struct RFM69HCW
  2310 ;;		 -> main@radio(75), 
  2311 ;;  i               2   14[BANK0 ] int 
  2312 ;;  msg            10    3[BANK0 ] unsigned char [10]
  2313 ;; Return value:  Size  Location     Type
  2314 ;;                  1    wreg      void 
  2315 ;; Registers used:
  2316 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2317 ;; Tracked objects:
  2318 ;;		On entry : 0/0
  2319 ;;		On exit  : 0/0
  2320 ;;		Unchanged: 0/0
  2321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2323 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2324 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2325 ;;      Totals:         2      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2326 ;;Total ram usage:       15 bytes
  2327 ;; Hardware stack levels used:    1
  2328 ;; Hardware stack levels required when called:    2
  2329 ;; This function calls:
  2330 ;;		_sendBulk
  2331 ;; This function is called by:
  2332 ;;		_initRadio
  2333 ;; This function uses a non-reentrant model
  2334 ;;
  2335                           
  2336                           
  2337                           ;psect for function _setSyncWords
  2338  05A9                     _setSyncWords:	
  2339                           
  2340                           ;incstack = 0
  2341                           ; Regs used in _setSyncWords: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2342                           ;setSyncWords@radio stored from wreg
  2343  05A9  0020               	movlb	0	; select bank0
  2344  05AA  00D9               	movwf	setSyncWords@radio
  2345                           
  2346                           ;RFM69HCW.c: 49:     unsigned char msg[10];;RFM69HCW.c: 50:     msg[0]=0x2e|0x80; msg[1]
      +                          =0b10011000;
  2347  05AB  30AE               	movlw	174
  2348  05AC  00FC               	movwf	??_setSyncWords
  2349  05AD  087C               	movf	??_setSyncWords,w
  2350  05AE  00CF               	movwf	setSyncWords@msg
  2351  05AF  3098               	movlw	152
  2352  05B0  00FC               	movwf	??_setSyncWords
  2353  05B1  087C               	movf	??_setSyncWords,w
  2354  05B2  00D0               	movwf	setSyncWords@msg+1
  2355                           
  2356                           ;RFM69HCW.c: 51:     for(int i=2;i<10;i++){
  2357  05B3  3002               	movlw	2
  2358  05B4  00DA               	movwf	setSyncWords@i
  2359  05B5  3000               	movlw	0
  2360  05B6  00DB               	movwf	setSyncWords@i+1
  2361  05B7                     l1191:	
  2362                           
  2363                           ;RFM69HCW.c: 52:         msg[i]=(radio->sync_words[i]);
  2364  05B7  0020               	movlb	0	; select bank0
  2365  05B8  085A               	movf	setSyncWords@i,w
  2366  05B9  0759               	addwf	setSyncWords@radio,w
  2367  05BA  00FC               	movwf	??_setSyncWords
  2368  05BB  087C               	movf	??_setSyncWords,w
  2369  05BC  3E42               	addlw	66
  2370  05BD  0086               	movwf	6
  2371  05BE  0187               	clrf	7
  2372  05BF  0801               	movf	1,w
  2373  05C0  00FD               	movwf	??_setSyncWords+1
  2374  05C1  085A               	movf	setSyncWords@i,w
  2375  05C2  3E4F               	addlw	(low (setSyncWords@msg| 0))& (0+255)
  2376  05C3  0086               	movwf	6
  2377  05C4  0187               	clrf	7
  2378  05C5  087D               	movf	??_setSyncWords+1,w
  2379  05C6  0081               	movwf	1
  2380                           
  2381                           ;RFM69HCW.c: 53:     }
  2382  05C7  3001               	movlw	1
  2383  05C8  07DA               	addwf	setSyncWords@i,f
  2384  05C9  3000               	movlw	0
  2385  05CA  3DDB               	addwfc	setSyncWords@i+1,f
  2386  05CB  085B               	movf	setSyncWords@i+1,w
  2387  05CC  3A80               	xorlw	128
  2388  05CD  00FC               	movwf	??_setSyncWords
  2389  05CE  3080               	movlw	128
  2390  05CF  027C               	subwf	??_setSyncWords,w
  2391  05D0  1D03               	skipz
  2392  05D1  2DD4               	goto	u265
  2393  05D2  300A               	movlw	10
  2394  05D3  025A               	subwf	setSyncWords@i,w
  2395  05D4                     u265:	
  2396  05D4  1C03               	skipc
  2397  05D5  2DB7               	goto	l1191
  2398                           
  2399                           ;RFM69HCW.c: 54:     sendBulk(radio,msg,10);
  2400  05D6  304F               	movlw	(low (setSyncWords@msg| 0))& (0+255)
  2401  05D7  00FC               	movwf	??_setSyncWords
  2402  05D8  087C               	movf	??_setSyncWords,w
  2403  05D9  00F6               	movwf	sendBulk@msgs
  2404  05DA  300A               	movlw	10
  2405  05DB  00FD               	movwf	??_setSyncWords+1
  2406  05DC  087D               	movf	??_setSyncWords+1,w
  2407  05DD  00F7               	movwf	sendBulk@len
  2408  05DE  0020               	movlb	0	; select bank0
  2409  05DF  0859               	movf	setSyncWords@radio,w
  2410  05E0  3187  270C         	fcall	_sendBulk
  2411  05E2  0008               	return
  2412  05E3                     __end_of_setSyncWords:	
  2413                           
  2414                           	psect	text8
  2415  039A                     __ptext8:	
  2416 ;; *************** function _setRecommendedParams *****************
  2417 ;; Defined at:
  2418 ;;		line 82 in file "RFM69HCW.c"
  2419 ;; Parameters:    Size  Location     Type
  2420 ;;  radio           1    wreg     PTR struct RFM69HCW
  2421 ;;		 -> main@radio(75), 
  2422 ;; Auto vars:     Size  Location     Type
  2423 ;;  radio           1   12[BANK0 ] PTR struct RFM69HCW
  2424 ;;		 -> main@radio(75), 
  2425 ;; Return value:  Size  Location     Type
  2426 ;;                  1    wreg      void 
  2427 ;; Registers used:
  2428 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2429 ;; Tracked objects:
  2430 ;;		On entry : 0/0
  2431 ;;		On exit  : 0/0
  2432 ;;		Unchanged: 0/0
  2433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2435 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2436 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2437 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2438 ;;Total ram usage:        2 bytes
  2439 ;; Hardware stack levels used:    1
  2440 ;; Hardware stack levels required when called:    3
  2441 ;; This function calls:
  2442 ;;		_sendPairs
  2443 ;; This function is called by:
  2444 ;;		_initRadio
  2445 ;; This function uses a non-reentrant model
  2446 ;;
  2447                           
  2448                           
  2449                           ;psect for function _setRecommendedParams
  2450  039A                     _setRecommendedParams:	
  2451                           
  2452                           ;incstack = 0
  2453                           ; Regs used in _setRecommendedParams: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2454                           ;setRecommendedParams@radio stored from wreg
  2455  039A  0020               	movlb	0	; select bank0
  2456  039B  00D8               	movwf	setRecommendedParams@radio
  2457                           
  2458                           ;RFM69HCW.c: 83:     sendPairs(radio, recommended_params, 8);
  2459  039C  3042               	movlw	(low (_recommended_params| 0))& (0+255)
  2460  039D  00D7               	movwf	??_setRecommendedParams
  2461  039E  0857               	movf	??_setRecommendedParams,w
  2462  039F  00CF               	movwf	sendPairs@msgs
  2463  03A0  3008               	movlw	8
  2464  03A1  00D0               	movwf	sendPairs@len
  2465  03A2  3000               	movlw	0
  2466  03A3  00D1               	movwf	sendPairs@len+1
  2467  03A4  0858               	movf	setRecommendedParams@radio,w
  2468  03A5  3185  25E3         	fcall	_sendPairs
  2469  03A7  0008               	return
  2470  03A8                     __end_of_setRecommendedParams:	
  2471                           
  2472                           	psect	text9
  2473  05E3                     __ptext9:	
  2474 ;; *************** function _sendPairs *****************
  2475 ;; Defined at:
  2476 ;;		line 7 in file "RFM69HCW.c"
  2477 ;; Parameters:    Size  Location     Type
  2478 ;;  radio           1    wreg     PTR struct RFM69HCW
  2479 ;;		 -> main@radio(75), 
  2480 ;;  msgs            1    3[BANK0 ] PTR unsigned char 
  2481 ;;		 -> recommended_params(10), 
  2482 ;;  len             2    4[BANK0 ] const int 
  2483 ;; Auto vars:     Size  Location     Type
  2484 ;;  radio           1    6[BANK0 ] PTR struct RFM69HCW
  2485 ;;		 -> main@radio(75), 
  2486 ;;  i               2    9[BANK0 ] int 
  2487 ;;  msg             2    7[BANK0 ] unsigned char [2]
  2488 ;; Return value:  Size  Location     Type
  2489 ;;                  1    wreg      void 
  2490 ;; Registers used:
  2491 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2492 ;; Tracked objects:
  2493 ;;		On entry : 0/0
  2494 ;;		On exit  : 0/0
  2495 ;;		Unchanged: 0/0
  2496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2497 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2498 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2499 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2500 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2501 ;;Total ram usage:       10 bytes
  2502 ;; Hardware stack levels used:    1
  2503 ;; Hardware stack levels required when called:    2
  2504 ;; This function calls:
  2505 ;;		_sendBulk
  2506 ;; This function is called by:
  2507 ;;		_setRecommendedParams
  2508 ;; This function uses a non-reentrant model
  2509 ;;
  2510                           
  2511                           
  2512                           ;psect for function _sendPairs
  2513  05E3                     _sendPairs:	
  2514                           
  2515                           ;incstack = 0
  2516                           ; Regs used in _sendPairs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2517                           ;sendPairs@radio stored from wreg
  2518  05E3  0020               	movlb	0	; select bank0
  2519  05E4  00D2               	movwf	sendPairs@radio
  2520                           
  2521                           ;RFM69HCW.c: 8:     byte msg[2] ={0};
  2522  05E5  01D3               	clrf	sendPairs@msg
  2523  05E6  01D4               	clrf	sendPairs@msg+1
  2524                           
  2525                           ;RFM69HCW.c: 9:     for(int i=0;i<len;i+=2){
  2526  05E7  01D5               	clrf	sendPairs@i
  2527  05E8  01D6               	clrf	sendPairs@i+1
  2528  05E9  0851               	movf	sendPairs@len+1,w
  2529  05EA  3A80               	xorlw	128
  2530  05EB  00FC               	movwf	??_sendPairs
  2531  05EC  3080               	movlw	128
  2532  05ED  027C               	subwf	??_sendPairs,w
  2533  05EE  1D03               	skipz
  2534  05EF  2DF2               	goto	u245
  2535  05F0  3001               	movlw	1
  2536  05F1  0250               	subwf	sendPairs@len,w
  2537  05F2                     u245:	
  2538  05F2  1C03               	btfss	3,0
  2539  05F3  0008               	return
  2540  05F4                     l1161:	
  2541                           
  2542                           ;RFM69HCW.c: 10:         msg[0]=msgs[i];msg[1]=msgs[i+1];
  2543  05F4  0020               	movlb	0	; select bank0
  2544  05F5  0855               	movf	sendPairs@i,w
  2545  05F6  074F               	addwf	sendPairs@msgs,w
  2546  05F7  00FC               	movwf	??_sendPairs
  2547  05F8  087C               	movf	??_sendPairs,w
  2548  05F9  0086               	movwf	6
  2549  05FA  0187               	clrf	7
  2550  05FB  0801               	movf	1,w
  2551  05FC  00FD               	movwf	??_sendPairs+1
  2552  05FD  087D               	movf	??_sendPairs+1,w
  2553  05FE  00D3               	movwf	sendPairs@msg
  2554  05FF  0855               	movf	sendPairs@i,w
  2555  0600  074F               	addwf	sendPairs@msgs,w
  2556  0601  00FC               	movwf	??_sendPairs
  2557  0602  087C               	movf	??_sendPairs,w
  2558  0603  0086               	movwf	6
  2559  0604  0187               	clrf	7
  2560  0605  3F41               	moviw [1]fsr1
  2561  0606  00D4               	movwf	sendPairs@msg+1
  2562                           
  2563                           ;RFM69HCW.c: 11:         sendBulk(radio, msg,2);
  2564  0607  3053               	movlw	(low (sendPairs@msg| 0))& (0+255)
  2565  0608  00FC               	movwf	??_sendPairs
  2566  0609  087C               	movf	??_sendPairs,w
  2567  060A  00F6               	movwf	sendBulk@msgs
  2568  060B  3002               	movlw	2
  2569  060C  00FD               	movwf	??_sendPairs+1
  2570  060D  087D               	movf	??_sendPairs+1,w
  2571  060E  00F7               	movwf	sendBulk@len
  2572  060F  0852               	movf	sendPairs@radio,w
  2573  0610  3187  270C  3185   	fcall	_sendBulk
  2574                           
  2575                           ;RFM69HCW.c: 12:     }
  2576  0613  3002               	movlw	2
  2577  0614  0020               	movlb	0	; select bank0
  2578  0615  07D5               	addwf	sendPairs@i,f
  2579  0616  3000               	movlw	0
  2580  0617  3DD6               	addwfc	sendPairs@i+1,f
  2581  0618  0856               	movf	sendPairs@i+1,w
  2582  0619  3A80               	xorlw	128
  2583  061A  00FC               	movwf	??_sendPairs
  2584  061B  0851               	movf	sendPairs@len+1,w
  2585  061C  3A80               	xorlw	128
  2586  061D  027C               	subwf	??_sendPairs,w
  2587  061E  1D03               	skipz
  2588  061F  2E22               	goto	u255
  2589  0620  0850               	movf	sendPairs@len,w
  2590  0621  0255               	subwf	sendPairs@i,w
  2591  0622                     u255:	
  2592  0622  1803               	btfsc	3,0
  2593  0623  0008               	return
  2594  0624  2DF4               	goto	l1161
  2595  0625                     __end_of_sendPairs:	
  2596                           
  2597                           	psect	text10
  2598  04F7                     __ptext10:	
  2599 ;; *************** function _setRSSIThreshold *****************
  2600 ;; Defined at:
  2601 ;;		line 67 in file "RFM69HCW.c"
  2602 ;; Parameters:    Size  Location     Type
  2603 ;;  radio           1    wreg     PTR struct RFM69HCW
  2604 ;;		 -> main@radio(75), 
  2605 ;; Auto vars:     Size  Location     Type
  2606 ;;  radio           1    5[BANK0 ] PTR struct RFM69HCW
  2607 ;;		 -> main@radio(75), 
  2608 ;;  msg             2    3[BANK0 ] unsigned char [2]
  2609 ;; Return value:  Size  Location     Type
  2610 ;;                  1    wreg      void 
  2611 ;; Registers used:
  2612 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2613 ;; Tracked objects:
  2614 ;;		On entry : 0/0
  2615 ;;		On exit  : 0/0
  2616 ;;		Unchanged: 0/0
  2617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2619 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2620 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2621 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2622 ;;Total ram usage:        5 bytes
  2623 ;; Hardware stack levels used:    1
  2624 ;; Hardware stack levels required when called:    2
  2625 ;; This function calls:
  2626 ;;		_sendBulk
  2627 ;; This function is called by:
  2628 ;;		_initRadio
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           
  2633                           ;psect for function _setRSSIThreshold
  2634  04F7                     _setRSSIThreshold:	
  2635                           
  2636                           ;incstack = 0
  2637                           ; Regs used in _setRSSIThreshold: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2638                           ;setRSSIThreshold@radio stored from wreg
  2639  04F7  0020               	movlb	0	; select bank0
  2640  04F8  00D1               	movwf	setRSSIThreshold@radio
  2641                           
  2642                           ;RFM69HCW.c: 68:     byte msg[] = {0x29|0x80, radio->RSSI_threshold};
  2643  04F9  01CF               	clrf	setRSSIThreshold@msg
  2644  04FA  01D0               	clrf	setRSSIThreshold@msg+1
  2645  04FB  30A9               	movlw	169
  2646  04FC  00FC               	movwf	??_setRSSIThreshold
  2647  04FD  087C               	movf	??_setRSSIThreshold,w
  2648  04FE  00CF               	movwf	setRSSIThreshold@msg
  2649  04FF  0851               	movf	setRSSIThreshold@radio,w
  2650  0500  3E41               	addlw	65
  2651  0501  0086               	movwf	6
  2652  0502  0187               	clrf	7
  2653  0503  0801               	movf	1,w
  2654  0504  00FC               	movwf	??_setRSSIThreshold
  2655  0505  087C               	movf	??_setRSSIThreshold,w
  2656  0506  00D0               	movwf	setRSSIThreshold@msg+1
  2657                           
  2658                           ;RFM69HCW.c: 69:     sendBulk(radio, msg, 2);
  2659  0507  304F               	movlw	(low (setRSSIThreshold@msg| 0))& (0+255)
  2660  0508  00FC               	movwf	??_setRSSIThreshold
  2661  0509  087C               	movf	??_setRSSIThreshold,w
  2662  050A  00F6               	movwf	sendBulk@msgs
  2663  050B  3002               	movlw	2
  2664  050C  00FD               	movwf	??_setRSSIThreshold+1
  2665  050D  087D               	movf	??_setRSSIThreshold+1,w
  2666  050E  00F7               	movwf	sendBulk@len
  2667  050F  0851               	movf	setRSSIThreshold@radio,w
  2668  0510  3187  270C         	fcall	_sendBulk
  2669  0512  0008               	return
  2670  0513                     __end_of_setRSSIThreshold:	
  2671                           
  2672                           	psect	text11
  2673  03CC                     __ptext11:	
  2674 ;; *************** function _setPreambleLength *****************
  2675 ;; Defined at:
  2676 ;;		line 106 in file "RFM69HCW.c"
  2677 ;; Parameters:    Size  Location     Type
  2678 ;;  radio           1    wreg     PTR struct RFM69HCW
  2679 ;;		 -> main@radio(75), 
  2680 ;; Auto vars:     Size  Location     Type
  2681 ;;  radio           1    5[BANK0 ] PTR struct RFM69HCW
  2682 ;;		 -> main@radio(75), 
  2683 ;;  msg             2    3[BANK0 ] unsigned char [2]
  2684 ;; Return value:  Size  Location     Type
  2685 ;;                  1    wreg      void 
  2686 ;; Registers used:
  2687 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2688 ;; Tracked objects:
  2689 ;;		On entry : 0/0
  2690 ;;		On exit  : 0/0
  2691 ;;		Unchanged: 0/0
  2692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2694 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2695 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2696 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2697 ;;Total ram usage:        5 bytes
  2698 ;; Hardware stack levels used:    1
  2699 ;; Hardware stack levels required when called:    2
  2700 ;; This function calls:
  2701 ;;		_sendBulk
  2702 ;; This function is called by:
  2703 ;;		_initRadio
  2704 ;; This function uses a non-reentrant model
  2705 ;;
  2706                           
  2707                           
  2708                           ;psect for function _setPreambleLength
  2709  03CC                     _setPreambleLength:	
  2710                           
  2711                           ;incstack = 0
  2712                           ; Regs used in _setPreambleLength: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2713                           ;setPreambleLength@radio stored from wreg
  2714  03CC  0020               	movlb	0	; select bank0
  2715  03CD  00D1               	movwf	setPreambleLength@radio
  2716                           
  2717                           ;RFM69HCW.c: 107:     byte msg[] = {0x2d|0x80, 0x03};
  2718  03CE  083B               	movf	setPreambleLength@F9437+1,w
  2719  03CF  00D0               	movwf	setPreambleLength@msg+1
  2720  03D0  083A               	movf	setPreambleLength@F9437,w
  2721  03D1  00CF               	movwf	setPreambleLength@msg
  2722                           
  2723                           ;RFM69HCW.c: 108:     sendBulk(radio, msg, 2);
  2724  03D2  304F               	movlw	(low (setPreambleLength@msg| 0))& (0+255)
  2725  03D3  00FC               	movwf	??_setPreambleLength
  2726  03D4  087C               	movf	??_setPreambleLength,w
  2727  03D5  00F6               	movwf	sendBulk@msgs
  2728  03D6  3002               	movlw	2
  2729  03D7  00FD               	movwf	??_setPreambleLength+1
  2730  03D8  087D               	movf	??_setPreambleLength+1,w
  2731  03D9  00F7               	movwf	sendBulk@len
  2732  03DA  0851               	movf	setPreambleLength@radio,w
  2733  03DB  3187  270C         	fcall	_sendBulk
  2734  03DD  0008               	return
  2735  03DE                     __end_of_setPreambleLength:	
  2736                           
  2737                           	psect	text12
  2738  04DB                     __ptext12:	
  2739 ;; *************** function _setPacketLength *****************
  2740 ;; Defined at:
  2741 ;;		line 57 in file "RFM69HCW.c"
  2742 ;; Parameters:    Size  Location     Type
  2743 ;;  radio           1    wreg     PTR struct RFM69HCW
  2744 ;;		 -> main@radio(75), 
  2745 ;; Auto vars:     Size  Location     Type
  2746 ;;  radio           1    5[BANK0 ] PTR struct RFM69HCW
  2747 ;;		 -> main@radio(75), 
  2748 ;;  msg             2    3[BANK0 ] unsigned char [2]
  2749 ;; Return value:  Size  Location     Type
  2750 ;;                  1    wreg      void 
  2751 ;; Registers used:
  2752 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2753 ;; Tracked objects:
  2754 ;;		On entry : 0/0
  2755 ;;		On exit  : 0/0
  2756 ;;		Unchanged: 0/0
  2757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2759 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2760 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2761 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2762 ;;Total ram usage:        5 bytes
  2763 ;; Hardware stack levels used:    1
  2764 ;; Hardware stack levels required when called:    2
  2765 ;; This function calls:
  2766 ;;		_sendBulk
  2767 ;; This function is called by:
  2768 ;;		_initRadio
  2769 ;; This function uses a non-reentrant model
  2770 ;;
  2771                           
  2772                           
  2773                           ;psect for function _setPacketLength
  2774  04DB                     _setPacketLength:	
  2775                           
  2776                           ;incstack = 0
  2777                           ; Regs used in _setPacketLength: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2778                           ;setPacketLength@radio stored from wreg
  2779  04DB  0020               	movlb	0	; select bank0
  2780  04DC  00D1               	movwf	setPacketLength@radio
  2781                           
  2782                           ;RFM69HCW.c: 58:     byte msg[] = {0x38|0x80, radio->packet_length};
  2783  04DD  01CF               	clrf	setPacketLength@msg
  2784  04DE  01D0               	clrf	setPacketLength@msg+1
  2785  04DF  30B8               	movlw	184
  2786  04E0  00FC               	movwf	??_setPacketLength
  2787  04E1  087C               	movf	??_setPacketLength,w
  2788  04E2  00CF               	movwf	setPacketLength@msg
  2789  04E3  0851               	movf	setPacketLength@radio,w
  2790  04E4  3E2B               	addlw	43
  2791  04E5  0086               	movwf	6
  2792  04E6  0187               	clrf	7
  2793  04E7  0801               	movf	1,w
  2794  04E8  00FC               	movwf	??_setPacketLength
  2795  04E9  087C               	movf	??_setPacketLength,w
  2796  04EA  00D0               	movwf	setPacketLength@msg+1
  2797                           
  2798                           ;RFM69HCW.c: 59:     sendBulk(radio, msg, 2);
  2799  04EB  304F               	movlw	(low (setPacketLength@msg| 0))& (0+255)
  2800  04EC  00FC               	movwf	??_setPacketLength
  2801  04ED  087C               	movf	??_setPacketLength,w
  2802  04EE  00F6               	movwf	sendBulk@msgs
  2803  04EF  3002               	movlw	2
  2804  04F0  00FD               	movwf	??_setPacketLength+1
  2805  04F1  087D               	movf	??_setPacketLength+1,w
  2806  04F2  00F7               	movwf	sendBulk@len
  2807  04F3  0851               	movf	setPacketLength@radio,w
  2808  04F4  3187  270C         	fcall	_sendBulk
  2809  04F6  0008               	return
  2810  04F7                     __end_of_setPacketLength:	
  2811                           
  2812                           	psect	text13
  2813  03BA                     __ptext13:	
  2814 ;; *************** function _setPacketFormat *****************
  2815 ;; Defined at:
  2816 ;;		line 72 in file "RFM69HCW.c"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;  radio           1    wreg     PTR struct RFM69HCW
  2819 ;;		 -> main@radio(75), 
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;  radio           1    5[BANK0 ] PTR struct RFM69HCW
  2822 ;;		 -> main@radio(75), 
  2823 ;;  msg             2    3[BANK0 ] unsigned char [2]
  2824 ;; Return value:  Size  Location     Type
  2825 ;;                  1    wreg      void 
  2826 ;; Registers used:
  2827 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2828 ;; Tracked objects:
  2829 ;;		On entry : 0/0
  2830 ;;		On exit  : 0/0
  2831 ;;		Unchanged: 0/0
  2832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2834 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2835 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2836 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2837 ;;Total ram usage:        5 bytes
  2838 ;; Hardware stack levels used:    1
  2839 ;; Hardware stack levels required when called:    2
  2840 ;; This function calls:
  2841 ;;		_sendBulk
  2842 ;; This function is called by:
  2843 ;;		_initRadio
  2844 ;; This function uses a non-reentrant model
  2845 ;;
  2846                           
  2847                           
  2848                           ;psect for function _setPacketFormat
  2849  03BA                     _setPacketFormat:	
  2850                           
  2851                           ;incstack = 0
  2852                           ; Regs used in _setPacketFormat: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2853                           ;setPacketFormat@radio stored from wreg
  2854  03BA  0020               	movlb	0	; select bank0
  2855  03BB  00D1               	movwf	setPacketFormat@radio
  2856                           
  2857                           ;RFM69HCW.c: 73:     byte msg[] = {0x37|0x80, 0b00010000};
  2858  03BC  0841               	movf	setPacketFormat@F9415+1,w
  2859  03BD  00D0               	movwf	setPacketFormat@msg+1
  2860  03BE  0840               	movf	setPacketFormat@F9415,w
  2861  03BF  00CF               	movwf	setPacketFormat@msg
  2862                           
  2863                           ;RFM69HCW.c: 74:     sendBulk(radio, msg, 2);
  2864  03C0  304F               	movlw	(low (setPacketFormat@msg| 0))& (0+255)
  2865  03C1  00FC               	movwf	??_setPacketFormat
  2866  03C2  087C               	movf	??_setPacketFormat,w
  2867  03C3  00F6               	movwf	sendBulk@msgs
  2868  03C4  3002               	movlw	2
  2869  03C5  00FD               	movwf	??_setPacketFormat+1
  2870  03C6  087D               	movf	??_setPacketFormat+1,w
  2871  03C7  00F7               	movwf	sendBulk@len
  2872  03C8  0851               	movf	setPacketFormat@radio,w
  2873  03C9  3187  270C         	fcall	_sendBulk
  2874  03CB  0008               	return
  2875  03CC                     __end_of_setPacketFormat:	
  2876                           
  2877                           	psect	text14
  2878  04BF                     __ptext14:	
  2879 ;; *************** function _setNodeAddress *****************
  2880 ;; Defined at:
  2881 ;;		line 62 in file "RFM69HCW.c"
  2882 ;; Parameters:    Size  Location     Type
  2883 ;;  radio           1    wreg     PTR struct RFM69HCW
  2884 ;;		 -> main@radio(75), 
  2885 ;; Auto vars:     Size  Location     Type
  2886 ;;  radio           1    5[BANK0 ] PTR struct RFM69HCW
  2887 ;;		 -> main@radio(75), 
  2888 ;;  msg             2    3[BANK0 ] unsigned char [2]
  2889 ;; Return value:  Size  Location     Type
  2890 ;;                  1    wreg      void 
  2891 ;; Registers used:
  2892 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2893 ;; Tracked objects:
  2894 ;;		On entry : 0/0
  2895 ;;		On exit  : 0/0
  2896 ;;		Unchanged: 0/0
  2897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2899 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2900 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2901 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2902 ;;Total ram usage:        5 bytes
  2903 ;; Hardware stack levels used:    1
  2904 ;; Hardware stack levels required when called:    2
  2905 ;; This function calls:
  2906 ;;		_sendBulk
  2907 ;; This function is called by:
  2908 ;;		_initRadio
  2909 ;; This function uses a non-reentrant model
  2910 ;;
  2911                           
  2912                           
  2913                           ;psect for function _setNodeAddress
  2914  04BF                     _setNodeAddress:	
  2915                           
  2916                           ;incstack = 0
  2917                           ; Regs used in _setNodeAddress: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2918                           ;setNodeAddress@radio stored from wreg
  2919  04BF  0020               	movlb	0	; select bank0
  2920  04C0  00D1               	movwf	setNodeAddress@radio
  2921                           
  2922                           ;RFM69HCW.c: 63:     byte msg[] = {0x39|0x80, radio->node_address};
  2923  04C1  01CF               	clrf	setNodeAddress@msg
  2924  04C2  01D0               	clrf	setNodeAddress@msg+1
  2925  04C3  30B9               	movlw	185
  2926  04C4  00FC               	movwf	??_setNodeAddress
  2927  04C5  087C               	movf	??_setNodeAddress,w
  2928  04C6  00CF               	movwf	setNodeAddress@msg
  2929  04C7  0851               	movf	setNodeAddress@radio,w
  2930  04C8  3E40               	addlw	64
  2931  04C9  0086               	movwf	6
  2932  04CA  0187               	clrf	7
  2933  04CB  0801               	movf	1,w
  2934  04CC  00FC               	movwf	??_setNodeAddress
  2935  04CD  087C               	movf	??_setNodeAddress,w
  2936  04CE  00D0               	movwf	setNodeAddress@msg+1
  2937                           
  2938                           ;RFM69HCW.c: 64:     sendBulk(radio, msg, 2);
  2939  04CF  304F               	movlw	(low (setNodeAddress@msg| 0))& (0+255)
  2940  04D0  00FC               	movwf	??_setNodeAddress
  2941  04D1  087C               	movf	??_setNodeAddress,w
  2942  04D2  00F6               	movwf	sendBulk@msgs
  2943  04D3  3002               	movlw	2
  2944  04D4  00FD               	movwf	??_setNodeAddress+1
  2945  04D5  087D               	movf	??_setNodeAddress+1,w
  2946  04D6  00F7               	movwf	sendBulk@len
  2947  04D7  0851               	movf	setNodeAddress@radio,w
  2948  04D8  3187  270C         	fcall	_sendBulk
  2949  04DA  0008               	return
  2950  04DB                     __end_of_setNodeAddress:	
  2951                           
  2952                           	psect	text15
  2953  03A8                     __ptext15:	
  2954 ;; *************** function _setModulationThreshold *****************
  2955 ;; Defined at:
  2956 ;;		line 86 in file "RFM69HCW.c"
  2957 ;; Parameters:    Size  Location     Type
  2958 ;;  radio           1    wreg     PTR struct RFM69HCW
  2959 ;;		 -> main@radio(75), 
  2960 ;; Auto vars:     Size  Location     Type
  2961 ;;  radio           1    5[BANK0 ] PTR struct RFM69HCW
  2962 ;;		 -> main@radio(75), 
  2963 ;;  msg             2    3[BANK0 ] unsigned char [2]
  2964 ;; Return value:  Size  Location     Type
  2965 ;;                  1    wreg      void 
  2966 ;; Registers used:
  2967 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2968 ;; Tracked objects:
  2969 ;;		On entry : 0/0
  2970 ;;		On exit  : 0/0
  2971 ;;		Unchanged: 0/0
  2972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2974 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2975 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2976 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2977 ;;Total ram usage:        5 bytes
  2978 ;; Hardware stack levels used:    1
  2979 ;; Hardware stack levels required when called:    2
  2980 ;; This function calls:
  2981 ;;		_sendBulk
  2982 ;; This function is called by:
  2983 ;;		_initRadio
  2984 ;; This function uses a non-reentrant model
  2985 ;;
  2986                           
  2987                           
  2988                           ;psect for function _setModulationThreshold
  2989  03A8                     _setModulationThreshold:	
  2990                           
  2991                           ;incstack = 0
  2992                           ; Regs used in _setModulationThreshold: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  2993                           ;setModulationThreshold@radio stored from wreg
  2994  03A8  0020               	movlb	0	; select bank0
  2995  03A9  00D1               	movwf	setModulationThreshold@radio
  2996                           
  2997                           ;RFM69HCW.c: 87:     byte msg[] = {0x3C|0x80, 0x07};
  2998  03AA  083F               	movf	setModulationThreshold@F9426+1,w
  2999  03AB  00D0               	movwf	setModulationThreshold@msg+1
  3000  03AC  083E               	movf	setModulationThreshold@F9426,w
  3001  03AD  00CF               	movwf	setModulationThreshold@msg
  3002                           
  3003                           ;RFM69HCW.c: 88:     sendBulk(radio, msg, 2);
  3004  03AE  304F               	movlw	(low (setModulationThreshold@msg| 0))& (0+255)
  3005  03AF  00FC               	movwf	??_setModulationThreshold
  3006  03B0  087C               	movf	??_setModulationThreshold,w
  3007  03B1  00F6               	movwf	sendBulk@msgs
  3008  03B2  3002               	movlw	2
  3009  03B3  00FD               	movwf	??_setModulationThreshold+1
  3010  03B4  087D               	movf	??_setModulationThreshold+1,w
  3011  03B5  00F7               	movwf	sendBulk@len
  3012  03B6  0851               	movf	setModulationThreshold@radio,w
  3013  03B7  3187  270C         	fcall	_sendBulk
  3014  03B9  0008               	return
  3015  03BA                     __end_of_setModulationThreshold:	
  3016                           
  3017                           	psect	text16
  3018  038B                     __ptext16:	
  3019 ;; *************** function _init *****************
  3020 ;; Defined at:
  3021 ;;		line 60 in file "receiver.c"
  3022 ;; Parameters:    Size  Location     Type
  3023 ;;		None
  3024 ;; Auto vars:     Size  Location     Type
  3025 ;;		None
  3026 ;; Return value:  Size  Location     Type
  3027 ;;                  2   71[None  ] int 
  3028 ;; Registers used:
  3029 ;;		wreg, status,2, status,0, pclath, cstack
  3030 ;; Tracked objects:
  3031 ;;		On entry : 0/0
  3032 ;;		On exit  : 0/0
  3033 ;;		Unchanged: 0/0
  3034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3038 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3039 ;;Total ram usage:        0 bytes
  3040 ;; Hardware stack levels used:    1
  3041 ;; Hardware stack levels required when called:    2
  3042 ;; This function calls:
  3043 ;;		_rfmSetup
  3044 ;; This function is called by:
  3045 ;;		_main
  3046 ;; This function uses a non-reentrant model
  3047 ;;
  3048                           
  3049                           
  3050                           ;psect for function _init
  3051  038B                     _init:	
  3052                           
  3053                           ;receiver.c: 61:     rfmSetup();
  3054                           
  3055                           ;incstack = 0
  3056                           ; Regs used in _init: [wreg+status,2+status,0+pclath+cstack]
  3057  038B  3185  2513         	fcall	_rfmSetup
  3058  038D  0008               	return
  3059  038E                     __end_of_init:	
  3060                           
  3061                           	psect	text17
  3062  0513                     __ptext17:	
  3063 ;; *************** function _rfmSetup *****************
  3064 ;; Defined at:
  3065 ;;		line 66 in file "receiver.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;		None
  3068 ;; Auto vars:     Size  Location     Type
  3069 ;;		None
  3070 ;; Return value:  Size  Location     Type
  3071 ;;                  1    wreg      void 
  3072 ;; Registers used:
  3073 ;;		wreg, status,2, status,0, pclath, cstack
  3074 ;; Tracked objects:
  3075 ;;		On entry : 0/0
  3076 ;;		On exit  : 0/0
  3077 ;;		Unchanged: 0/0
  3078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3081 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3082 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3083 ;;Total ram usage:        1 bytes
  3084 ;; Hardware stack levels used:    1
  3085 ;; Hardware stack levels required when called:    1
  3086 ;; This function calls:
  3087 ;;		_resetRadio
  3088 ;;		_spi_init_master
  3089 ;; This function is called by:
  3090 ;;		_init
  3091 ;; This function uses a non-reentrant model
  3092 ;;
  3093                           
  3094                           
  3095                           ;psect for function _rfmSetup
  3096  0513                     _rfmSetup:	
  3097                           
  3098                           ;receiver.c: 67:     TRISCbits.TRISC2=0;
  3099                           
  3100                           ;incstack = 0
  3101                           ; Regs used in _rfmSetup: [wreg+status,2+status,0+pclath+cstack]
  3102  0513  0021               	movlb	1	; select bank1
  3103  0514  110E               	bcf	14,2	;volatile
  3104                           
  3105                           ;receiver.c: 68:     TRISCbits.TRISC3=0;
  3106  0515  118E               	bcf	14,3	;volatile
  3107                           
  3108                           ;receiver.c: 69:     TRISCbits.TRISC5=0;
  3109  0516  128E               	bcf	14,5	;volatile
  3110                           
  3111                           ;receiver.c: 70:     SSP1BUF;
  3112  0517  0024               	movlb	4	; select bank4
  3113  0518  0811               	movf	17,w	;volatile
  3114                           
  3115                           ;receiver.c: 71:     SSP1STATbits.BF=0;
  3116  0519  1014               	bcf	20,0	;volatile
  3117                           
  3118                           ;receiver.c: 72:     OSCCONbits.IRCF=0b1111;
  3119  051A  3078               	movlw	120
  3120  051B  0021               	movlb	1	; select bank1
  3121  051C  0499               	iorwf	25,f	;volatile
  3122                           
  3123                           ;receiver.c: 73:     spi_init_master();
  3124  051D  3184  24A3  3185   	fcall	_spi_init_master
  3125                           
  3126                           ;receiver.c: 74:     TRISCbits.TRISC5=0;
  3127  0520  0021               	movlb	1	; select bank1
  3128  0521  128E               	bcf	14,5	;volatile
  3129                           
  3130                           ;receiver.c: 75:     resetRadio();
  3131  0522  3184  242E  3185   	fcall	_resetRadio
  3132                           
  3133                           ;receiver.c: 76:     TRISAbits.TRISA2=0;
  3134  0525  0021               	movlb	1	; select bank1
  3135  0526  110C               	bcf	12,2	;volatile
  3136                           
  3137                           ;receiver.c: 77:     _delay((unsigned long)((20)*(16000000/4000.0)));
  3138  0527  3068               	movlw	104
  3139  0528  00F1               	movwf	??_rfmSetup
  3140  0529  30E4               	movlw	228
  3141  052A                     u327:	
  3142  052A  0B89               	decfsz	9,f
  3143  052B  2D2A               	goto	u327
  3144  052C  0BF1               	decfsz	??_rfmSetup,f
  3145  052D  2D2A               	goto	u327
  3146  052E  3200               	nop2
  3147  052F  0008               	return
  3148  0530                     __end_of_rfmSetup:	
  3149                           
  3150                           	psect	text18
  3151  04A3                     __ptext18:	
  3152 ;; *************** function _spi_init_master *****************
  3153 ;; Defined at:
  3154 ;;		line 107 in file "receiver.c"
  3155 ;; Parameters:    Size  Location     Type
  3156 ;;		None
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;		None
  3159 ;; Return value:  Size  Location     Type
  3160 ;;                  1    wreg      void 
  3161 ;; Registers used:
  3162 ;;		wreg, status,2, status,0
  3163 ;; Tracked objects:
  3164 ;;		On entry : 0/0
  3165 ;;		On exit  : 0/0
  3166 ;;		Unchanged: 0/0
  3167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3172 ;;Total ram usage:        0 bytes
  3173 ;; Hardware stack levels used:    1
  3174 ;; This function calls:
  3175 ;;		Nothing
  3176 ;; This function is called by:
  3177 ;;		_rfmSetup
  3178 ;; This function uses a non-reentrant model
  3179 ;;
  3180                           
  3181                           
  3182                           ;psect for function _spi_init_master
  3183  04A3                     _spi_init_master:	
  3184                           
  3185                           ;receiver.c: 108:     ANSELA=0;
  3186                           
  3187                           ;incstack = 0
  3188                           ; Regs used in _spi_init_master: [wreg+status,2+status,0]
  3189  04A3  0023               	movlb	3	; select bank3
  3190  04A4  018C               	clrf	12	;volatile
  3191                           
  3192                           ;receiver.c: 109:     ANSELC=0;
  3193  04A5  018E               	clrf	14	;volatile
  3194                           
  3195                           ;receiver.c: 110:     SSP1CON1bits.SSPM=0b0001;
  3196  04A6  0024               	movlb	4	; select bank4
  3197  04A7  0815               	movf	21,w	;volatile
  3198  04A8  39F0               	andlw	-16
  3199  04A9  3801               	iorlw	1
  3200  04AA  0095               	movwf	21	;volatile
  3201                           
  3202                           ;receiver.c: 111:     SSP1CONbits.SSPEN=1;
  3203  04AB  1695               	bsf	21,5	;volatile
  3204                           
  3205                           ;receiver.c: 112:     SSP1CONbits.CKP=0;
  3206  04AC  1215               	bcf	21,4	;volatile
  3207                           
  3208                           ;receiver.c: 113:     SSP1STATbits.CKE=1;
  3209  04AD  1714               	bsf	20,6	;volatile
  3210                           
  3211                           ;receiver.c: 114:     SSP1STATbits.SMP=0;
  3212  04AE  1394               	bcf	20,7	;volatile
  3213                           
  3214                           ;receiver.c: 116:     RC0PPS=0b10000;
  3215  04AF  3010               	movlw	16
  3216  04B0  003D               	movlb	29	; select bank29
  3217  04B1  00A0               	movwf	32	;volatile
  3218                           
  3219                           ;receiver.c: 117:     TRISCbits.TRISC0=0;
  3220  04B2  0021               	movlb	1	; select bank1
  3221  04B3  100E               	bcf	14,0	;volatile
  3222                           
  3223                           ;receiver.c: 120:     SSPDATPPS=0b10001;
  3224  04B4  3011               	movlw	17
  3225  04B5  003C               	movlb	28	; select bank28
  3226  04B6  00A1               	movwf	33	;volatile
  3227                           
  3228                           ;receiver.c: 121:     TRISCbits.TRISC1=1;
  3229  04B7  0021               	movlb	1	; select bank1
  3230  04B8  148E               	bsf	14,1	;volatile
  3231                           
  3232                           ;receiver.c: 124:     RC3PPS=0b10001;
  3233  04B9  3011               	movlw	17
  3234  04BA  003D               	movlb	29	; select bank29
  3235  04BB  00A3               	movwf	35	;volatile
  3236                           
  3237                           ;receiver.c: 125:     TRISCbits.TRISC3=0;
  3238  04BC  0021               	movlb	1	; select bank1
  3239  04BD  118E               	bcf	14,3	;volatile
  3240  04BE  0008               	return
  3241  04BF                     __end_of_spi_init_master:	
  3242                           
  3243                           	psect	text19
  3244  042E                     __ptext19:	
  3245 ;; *************** function _resetRadio *****************
  3246 ;; Defined at:
  3247 ;;		line 53 in file "receiver.c"
  3248 ;; Parameters:    Size  Location     Type
  3249 ;;		None
  3250 ;; Auto vars:     Size  Location     Type
  3251 ;;		None
  3252 ;; Return value:  Size  Location     Type
  3253 ;;                  1    wreg      void 
  3254 ;; Registers used:
  3255 ;;		wreg
  3256 ;; Tracked objects:
  3257 ;;		On entry : 0/0
  3258 ;;		On exit  : 0/0
  3259 ;;		Unchanged: 0/0
  3260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3263 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3264 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3265 ;;Total ram usage:        1 bytes
  3266 ;; Hardware stack levels used:    1
  3267 ;; This function calls:
  3268 ;;		Nothing
  3269 ;; This function is called by:
  3270 ;;		_rfmSetup
  3271 ;; This function uses a non-reentrant model
  3272 ;;
  3273                           
  3274                           
  3275                           ;psect for function _resetRadio
  3276  042E                     _resetRadio:	
  3277                           
  3278                           ;receiver.c: 54:     PORTCbits.RC2 = 1;
  3279                           
  3280                           ;incstack = 0
  3281                           ; Regs used in _resetRadio: [wreg]
  3282  042E  0020               	movlb	0	; select bank0
  3283  042F  150E               	bsf	14,2	;volatile
  3284                           
  3285                           ;receiver.c: 55:     _delay((unsigned long)((1)*(16000000/4000.0)));
  3286  0430  3006               	movlw	6
  3287  0431  00F0               	movwf	??_resetRadio
  3288  0432  3030               	movlw	48
  3289  0433                     u337:	
  3290  0433  0B89               	decfsz	9,f
  3291  0434  2C33               	goto	u337
  3292  0435  0BF0               	decfsz	??_resetRadio,f
  3293  0436  2C33               	goto	u337
  3294  0437  3200               	nop2
  3295                           
  3296                           ;receiver.c: 56:     PORTCbits.RC2 = 0;
  3297  0438  0020               	movlb	0	; select bank0
  3298  0439  110E               	bcf	14,2	;volatile
  3299                           
  3300                           ;receiver.c: 57:     _delay((unsigned long)((20)*(16000000/4000.0)));
  3301  043A  3068               	movlw	104
  3302  043B  00F0               	movwf	??_resetRadio
  3303  043C  30E4               	movlw	228
  3304  043D                     u347:	
  3305  043D  0B89               	decfsz	9,f
  3306  043E  2C3D               	goto	u347
  3307  043F  0BF0               	decfsz	??_resetRadio,f
  3308  0440  2C3D               	goto	u347
  3309  0441  3200               	nop2
  3310  0442  0008               	return
  3311  0443                     __end_of_resetRadio:	
  3312                           
  3313                           	psect	text20
  3314  041A                     __ptext20:	
  3315 ;; *************** function _getRSSI *****************
  3316 ;; Defined at:
  3317 ;;		line 136 in file "RFM69HCW.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;  radio           1    wreg     PTR struct RFM69HCW
  3320 ;;		 -> main@radio(75), 
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;  radio           1    3[BANK0 ] PTR struct RFM69HCW
  3323 ;;		 -> main@radio(75), 
  3324 ;;  msg             2    4[BANK0 ] unsigned char [2]
  3325 ;; Return value:  Size  Location     Type
  3326 ;;                  1    wreg      unsigned char 
  3327 ;; Registers used:
  3328 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3329 ;; Tracked objects:
  3330 ;;		On entry : 0/0
  3331 ;;		On exit  : 0/0
  3332 ;;		Unchanged: 0/0
  3333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3335 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3336 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3337 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3338 ;;Total ram usage:        5 bytes
  3339 ;; Hardware stack levels used:    1
  3340 ;; Hardware stack levels required when called:    2
  3341 ;; This function calls:
  3342 ;;		_sendBulk
  3343 ;; This function is called by:
  3344 ;;		_main
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           
  3349                           ;psect for function _getRSSI
  3350  041A                     _getRSSI:	
  3351                           
  3352                           ;incstack = 0
  3353                           ; Regs used in _getRSSI: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3354                           ;getRSSI@radio stored from wreg
  3355  041A  0020               	movlb	0	; select bank0
  3356  041B  00CF               	movwf	getRSSI@radio
  3357                           
  3358                           ;RFM69HCW.c: 137:     byte msg[]={0x24, 0x0};
  3359  041C  0839               	movf	getRSSI@F9452+1,w
  3360  041D  00D1               	movwf	getRSSI@msg+1
  3361  041E  0838               	movf	getRSSI@F9452,w
  3362  041F  00D0               	movwf	getRSSI@msg
  3363                           
  3364                           ;RFM69HCW.c: 138:     sendBulk(radio, msg, 2);
  3365  0420  3050               	movlw	(low (getRSSI@msg| 0))& (0+255)
  3366  0421  00FC               	movwf	??_getRSSI
  3367  0422  087C               	movf	??_getRSSI,w
  3368  0423  00F6               	movwf	sendBulk@msgs
  3369  0424  3002               	movlw	2
  3370  0425  00FD               	movwf	??_getRSSI+1
  3371  0426  087D               	movf	??_getRSSI+1,w
  3372  0427  00F7               	movwf	sendBulk@len
  3373  0428  084F               	movf	getRSSI@radio,w
  3374  0429  3187  270C         	fcall	_sendBulk
  3375                           
  3376                           ;RFM69HCW.c: 139:     return msg[1];
  3377  042B  0020               	movlb	0	; select bank0
  3378  042C  0851               	movf	getRSSI@msg+1,w
  3379  042D  0008               	return
  3380  042E                     __end_of_getRSSI:	
  3381                           
  3382                           	psect	text21
  3383  0406                     __ptext21:	
  3384 ;; *************** function _getOperatingMode *****************
  3385 ;; Defined at:
  3386 ;;		line 154 in file "RFM69HCW.c"
  3387 ;; Parameters:    Size  Location     Type
  3388 ;;  radio           1    wreg     PTR struct RFM69HCW
  3389 ;;		 -> main@radio(75), 
  3390 ;; Auto vars:     Size  Location     Type
  3391 ;;  radio           1    3[BANK0 ] PTR struct RFM69HCW
  3392 ;;		 -> main@radio(75), 
  3393 ;;  msg             2    4[BANK0 ] unsigned char [2]
  3394 ;; Return value:  Size  Location     Type
  3395 ;;                  1    wreg      unsigned char 
  3396 ;; Registers used:
  3397 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3398 ;; Tracked objects:
  3399 ;;		On entry : 0/0
  3400 ;;		On exit  : 0/0
  3401 ;;		Unchanged: 0/0
  3402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3404 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3405 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3406 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3407 ;;Total ram usage:        5 bytes
  3408 ;; Hardware stack levels used:    1
  3409 ;; Hardware stack levels required when called:    2
  3410 ;; This function calls:
  3411 ;;		_sendBulk
  3412 ;; This function is called by:
  3413 ;;		_main
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416                           
  3417                           
  3418                           ;psect for function _getOperatingMode
  3419  0406                     _getOperatingMode:	
  3420                           
  3421                           ;incstack = 0
  3422                           ; Regs used in _getOperatingMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3423                           ;getOperatingMode@radio stored from wreg
  3424  0406  0020               	movlb	0	; select bank0
  3425  0407  00CF               	movwf	getOperatingMode@radio
  3426                           
  3427                           ;RFM69HCW.c: 155:     byte msg[]={0x01, 0x0};
  3428  0408  0833               	movf	getOperatingMode@F9464+1,w
  3429  0409  00D1               	movwf	getOperatingMode@msg+1
  3430  040A  0832               	movf	getOperatingMode@F9464,w
  3431  040B  00D0               	movwf	getOperatingMode@msg
  3432                           
  3433                           ;RFM69HCW.c: 156:     sendBulk(radio, msg, 2);
  3434  040C  3050               	movlw	(low (getOperatingMode@msg| 0))& (0+255)
  3435  040D  00FC               	movwf	??_getOperatingMode
  3436  040E  087C               	movf	??_getOperatingMode,w
  3437  040F  00F6               	movwf	sendBulk@msgs
  3438  0410  3002               	movlw	2
  3439  0411  00FD               	movwf	??_getOperatingMode+1
  3440  0412  087D               	movf	??_getOperatingMode+1,w
  3441  0413  00F7               	movwf	sendBulk@len
  3442  0414  084F               	movf	getOperatingMode@radio,w
  3443  0415  3187  270C         	fcall	_sendBulk
  3444                           
  3445                           ;RFM69HCW.c: 157:     return msg[1];
  3446  0417  0020               	movlb	0	; select bank0
  3447  0418  0851               	movf	getOperatingMode@msg+1,w
  3448  0419  0008               	return
  3449  041A                     __end_of_getOperatingMode:	
  3450                           
  3451                           	psect	text22
  3452  03F2                     __ptext22:	
  3453 ;; *************** function _getModeFlags *****************
  3454 ;; Defined at:
  3455 ;;		line 166 in file "RFM69HCW.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;  radio           1    wreg     PTR struct RFM69HCW
  3458 ;;		 -> main@radio(75), 
  3459 ;; Auto vars:     Size  Location     Type
  3460 ;;  radio           1    3[BANK0 ] PTR struct RFM69HCW
  3461 ;;		 -> main@radio(75), 
  3462 ;;  msg             2    4[BANK0 ] unsigned char [2]
  3463 ;; Return value:  Size  Location     Type
  3464 ;;                  1    wreg      unsigned char 
  3465 ;; Registers used:
  3466 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3467 ;; Tracked objects:
  3468 ;;		On entry : 0/0
  3469 ;;		On exit  : 0/0
  3470 ;;		Unchanged: 0/0
  3471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3473 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3474 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3475 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3476 ;;Total ram usage:        5 bytes
  3477 ;; Hardware stack levels used:    1
  3478 ;; Hardware stack levels required when called:    2
  3479 ;; This function calls:
  3480 ;;		_sendBulk
  3481 ;; This function is called by:
  3482 ;;		_main
  3483 ;; This function uses a non-reentrant model
  3484 ;;
  3485                           
  3486                           
  3487                           ;psect for function _getModeFlags
  3488  03F2                     _getModeFlags:	
  3489                           
  3490                           ;incstack = 0
  3491                           ; Regs used in _getModeFlags: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3492                           ;getModeFlags@radio stored from wreg
  3493  03F2  0020               	movlb	0	; select bank0
  3494  03F3  00CF               	movwf	getModeFlags@radio
  3495                           
  3496                           ;RFM69HCW.c: 167:     byte msg[]={0x27, 0x0};
  3497  03F4  0831               	movf	getModeFlags@F9473+1,w
  3498  03F5  00D1               	movwf	getModeFlags@msg+1
  3499  03F6  0830               	movf	getModeFlags@F9473,w
  3500  03F7  00D0               	movwf	getModeFlags@msg
  3501                           
  3502                           ;RFM69HCW.c: 168:     sendBulk(radio, msg, 2);
  3503  03F8  3050               	movlw	(low (getModeFlags@msg| 0))& (0+255)
  3504  03F9  00FC               	movwf	??_getModeFlags
  3505  03FA  087C               	movf	??_getModeFlags,w
  3506  03FB  00F6               	movwf	sendBulk@msgs
  3507  03FC  3002               	movlw	2
  3508  03FD  00FD               	movwf	??_getModeFlags+1
  3509  03FE  087D               	movf	??_getModeFlags+1,w
  3510  03FF  00F7               	movwf	sendBulk@len
  3511  0400  084F               	movf	getModeFlags@radio,w
  3512  0401  3187  270C         	fcall	_sendBulk
  3513                           
  3514                           ;RFM69HCW.c: 169:     return msg[1];
  3515  0403  0020               	movlb	0	; select bank0
  3516  0404  0851               	movf	getModeFlags@msg+1,w
  3517  0405  0008               	return
  3518  0406                     __end_of_getModeFlags:	
  3519                           
  3520                           	psect	text23
  3521  03DE                     __ptext23:	
  3522 ;; *************** function _getFifoFlags *****************
  3523 ;; Defined at:
  3524 ;;		line 142 in file "RFM69HCW.c"
  3525 ;; Parameters:    Size  Location     Type
  3526 ;;  radio           1    wreg     PTR struct RFM69HCW
  3527 ;;		 -> main@radio(75), 
  3528 ;; Auto vars:     Size  Location     Type
  3529 ;;  radio           1    3[BANK0 ] PTR struct RFM69HCW
  3530 ;;		 -> main@radio(75), 
  3531 ;;  msg             2    4[BANK0 ] unsigned char [2]
  3532 ;; Return value:  Size  Location     Type
  3533 ;;                  1    wreg      unsigned char 
  3534 ;; Registers used:
  3535 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3536 ;; Tracked objects:
  3537 ;;		On entry : 0/0
  3538 ;;		On exit  : 0/0
  3539 ;;		Unchanged: 0/0
  3540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3542 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3543 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3544 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3545 ;;Total ram usage:        5 bytes
  3546 ;; Hardware stack levels used:    1
  3547 ;; Hardware stack levels required when called:    2
  3548 ;; This function calls:
  3549 ;;		_sendBulk
  3550 ;; This function is called by:
  3551 ;;		_main
  3552 ;; This function uses a non-reentrant model
  3553 ;;
  3554                           
  3555                           
  3556                           ;psect for function _getFifoFlags
  3557  03DE                     _getFifoFlags:	
  3558                           
  3559                           ;incstack = 0
  3560                           ; Regs used in _getFifoFlags: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3561                           ;getFifoFlags@radio stored from wreg
  3562  03DE  0020               	movlb	0	; select bank0
  3563  03DF  00CF               	movwf	getFifoFlags@radio
  3564                           
  3565                           ;RFM69HCW.c: 143:     byte msg[]={0x28, 0x0};
  3566  03E0  0837               	movf	getFifoFlags@F9456+1,w
  3567  03E1  00D1               	movwf	getFifoFlags@msg+1
  3568  03E2  0836               	movf	getFifoFlags@F9456,w
  3569  03E3  00D0               	movwf	getFifoFlags@msg
  3570                           
  3571                           ;RFM69HCW.c: 144:     sendBulk(radio, msg, 2);
  3572  03E4  3050               	movlw	(low (getFifoFlags@msg| 0))& (0+255)
  3573  03E5  00FC               	movwf	??_getFifoFlags
  3574  03E6  087C               	movf	??_getFifoFlags,w
  3575  03E7  00F6               	movwf	sendBulk@msgs
  3576  03E8  3002               	movlw	2
  3577  03E9  00FD               	movwf	??_getFifoFlags+1
  3578  03EA  087D               	movf	??_getFifoFlags+1,w
  3579  03EB  00F7               	movwf	sendBulk@len
  3580  03EC  084F               	movf	getFifoFlags@radio,w
  3581  03ED  3187  270C         	fcall	_sendBulk
  3582                           
  3583                           ;RFM69HCW.c: 145:     return msg[1];
  3584  03EF  0020               	movlb	0	; select bank0
  3585  03F0  0851               	movf	getFifoFlags@msg+1,w
  3586  03F1  0008               	return
  3587  03F2                     __end_of_getFifoFlags:	
  3588                           
  3589                           	psect	text24
  3590  070C                     __ptext24:	
  3591 ;; *************** function _sendBulk *****************
  3592 ;; Defined at:
  3593 ;;		line 15 in file "RFM69HCW.c"
  3594 ;; Parameters:    Size  Location     Type
  3595 ;;  radio           1    wreg     PTR struct RFM69HCW
  3596 ;;		 -> main@radio(75), 
  3597 ;;  msgs            1    6[COMMON] PTR unsigned char 
  3598 ;;		 -> setAutoMode@msg(2), getPowerSettings@msg(2), restartRx@msg(2), startRSSISampling@msg(2), 
  3599 ;;		 -> checkRSSISampling@msg(2), getModeFlags@msg(2), setDiodeMapping@msg(2), getOperatingMode@msg(2), 
  3600 ;;		 -> getRSSIThreshold@msg(2), getFifoFlags@msg(2), getRSSI@msg(2), setPowerOutput@msg(2), 
  3601 ;;		 -> setPreambleLength@msg(2), checkForPayload@flags(2), setModulationThreshold@msg(2), setOperatingMode@msg(2), 
  3602 ;;		 -> setPacketFormat@msg(2), setRSSIThreshold@msg(2), setNodeAddress@msg(2), setPacketLength@msg(2), 
  3603 ;;		 -> setSyncWords@msg(10), sendPairs@msg(2), 
  3604 ;;  len             1    7[COMMON] const unsigned char 
  3605 ;; Auto vars:     Size  Location     Type
  3606 ;;  radio           1    2[BANK0 ] PTR struct RFM69HCW
  3607 ;;		 -> main@radio(75), 
  3608 ;;  i               2    0[BANK0 ] int 
  3609 ;; Return value:  Size  Location     Type
  3610 ;;                  1    wreg      void 
  3611 ;; Registers used:
  3612 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3613 ;; Tracked objects:
  3614 ;;		On entry : 0/0
  3615 ;;		On exit  : 0/0
  3616 ;;		Unchanged: 0/0
  3617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3618 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3619 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3620 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3621 ;;      Totals:         6       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3622 ;;Total ram usage:        9 bytes
  3623 ;; Hardware stack levels used:    1
  3624 ;; Hardware stack levels required when called:    1
  3625 ;; This function calls:
  3626 ;;		_send
  3627 ;;		_setPinWithMask
  3628 ;; This function is called by:
  3629 ;;		_sendPairs
  3630 ;;		_setSyncWords
  3631 ;;		_setPacketLength
  3632 ;;		_setNodeAddress
  3633 ;;		_setRSSIThreshold
  3634 ;;		_setPacketFormat
  3635 ;;		_setOperatingMode
  3636 ;;		_setModulationThreshold
  3637 ;;		_setPreambleLength
  3638 ;;		_setPowerOutput
  3639 ;;		_getRSSI
  3640 ;;		_getFifoFlags
  3641 ;;		_getOperatingMode
  3642 ;;		_setDiodeMapping
  3643 ;;		_getModeFlags
  3644 ;;		_setAutoMode
  3645 ;;		_checkForPayload
  3646 ;;		_getRSSIThreshold
  3647 ;;		_checkRSSISampling
  3648 ;;		_startRSSISampling
  3649 ;;		_restartRx
  3650 ;;		_getPowerSettings
  3651 ;; This function uses a non-reentrant model
  3652 ;;
  3653                           
  3654                           
  3655                           ;psect for function _sendBulk
  3656  070C                     _sendBulk:	
  3657                           
  3658                           ;incstack = 0
  3659                           ; Regs used in _sendBulk: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3660                           ;sendBulk@radio stored from wreg
  3661  070C  0020               	movlb	0	; select bank0
  3662  070D  00CE               	movwf	sendBulk@radio
  3663                           
  3664                           ;RFM69HCW.c: 16:     setPinWithMask(radio->SSport, radio->SSbit, 0);
  3665  070E  084E               	movf	sendBulk@radio,w
  3666  070F  3E28               	addlw	40
  3667  0710  0086               	movwf	6
  3668  0711  0187               	clrf	7
  3669  0712  3F40               	moviw [0]fsr1
  3670  0713  00F0               	movwf	setPinWithMask@pPort
  3671  0714  3F41               	moviw [1]fsr1
  3672  0715  00F1               	movwf	setPinWithMask@pPort+1
  3673  0716  084E               	movf	sendBulk@radio,w
  3674  0717  3E2A               	addlw	42
  3675  0718  0086               	movwf	6
  3676  0719  0187               	clrf	7
  3677  071A  0801               	movf	1,w
  3678  071B  00F8               	movwf	??_sendBulk
  3679  071C  0878               	movf	??_sendBulk,w
  3680  071D  00F2               	movwf	setPinWithMask@iPin
  3681  071E  01F3               	clrf	setPinWithMask@value
  3682  071F  3185  2530  3187   	fcall	_setPinWithMask
  3683                           
  3684                           ;RFM69HCW.c: 17:     for(int i=0; i<len; i++){
  3685  0722  0020               	movlb	0	; select bank0
  3686  0723  01CC               	clrf	sendBulk@i
  3687  0724  01CD               	clrf	sendBulk@i+1
  3688  0725  0877               	movf	sendBulk@len,w
  3689  0726  1903               	btfsc	3,2
  3690  0727  2F50               	goto	l1123
  3691  0728                     l1117:	
  3692                           
  3693                           ;RFM69HCW.c: 18:         msgs[i]=send(radio, msgs[i]);
  3694  0728  0020               	movlb	0	; select bank0
  3695  0729  084C               	movf	sendBulk@i,w
  3696  072A  0776               	addwf	sendBulk@msgs,w
  3697  072B  00F8               	movwf	??_sendBulk
  3698  072C  0878               	movf	??_sendBulk,w
  3699  072D  0086               	movwf	6
  3700  072E  0187               	clrf	7
  3701  072F  0801               	movf	1,w
  3702  0730  00F9               	movwf	??_sendBulk+1
  3703  0731  0879               	movf	??_sendBulk+1,w
  3704  0732  00F0               	movwf	send@msg
  3705  0733  084E               	movf	sendBulk@radio,w
  3706  0734  3186  2625  3187   	fcall	_send
  3707  0737  00FA               	movwf	??_sendBulk+2
  3708  0738  0020               	movlb	0	; select bank0
  3709  0739  084C               	movf	sendBulk@i,w
  3710  073A  0776               	addwf	sendBulk@msgs,w
  3711  073B  00FB               	movwf	??_sendBulk+3
  3712  073C  087B               	movf	??_sendBulk+3,w
  3713  073D  0086               	movwf	6
  3714  073E  0187               	clrf	7
  3715  073F  087A               	movf	??_sendBulk+2,w
  3716  0740  0081               	movwf	1
  3717                           
  3718                           ;RFM69HCW.c: 19:     }
  3719  0741  3001               	movlw	1
  3720  0742  07CC               	addwf	sendBulk@i,f
  3721  0743  3000               	movlw	0
  3722  0744  3DCD               	addwfc	sendBulk@i+1,f
  3723  0745  084D               	movf	sendBulk@i+1,w
  3724  0746  3A80               	xorlw	128
  3725  0747  00F8               	movwf	??_sendBulk
  3726  0748  3080               	movlw	128
  3727  0749  0278               	subwf	??_sendBulk,w
  3728  074A  1D03               	skipz
  3729  074B  2F4E               	goto	u235
  3730  074C  0877               	movf	sendBulk@len,w
  3731  074D  024C               	subwf	sendBulk@i,w
  3732  074E                     u235:	
  3733  074E  1C03               	skipc
  3734  074F  2F28               	goto	l1117
  3735  0750                     l1123:	
  3736                           
  3737                           ;RFM69HCW.c: 20:     setPinWithMask(radio->SSport, radio->SSbit,1);
  3738  0750  0020               	movlb	0	; select bank0
  3739  0751  084E               	movf	sendBulk@radio,w
  3740  0752  3E28               	addlw	40
  3741  0753  0086               	movwf	6
  3742  0754  0187               	clrf	7
  3743  0755  3F40               	moviw [0]fsr1
  3744  0756  00F0               	movwf	setPinWithMask@pPort
  3745  0757  3F41               	moviw [1]fsr1
  3746  0758  00F1               	movwf	setPinWithMask@pPort+1
  3747  0759  084E               	movf	sendBulk@radio,w
  3748  075A  3E2A               	addlw	42
  3749  075B  0086               	movwf	6
  3750  075C  0187               	clrf	7
  3751  075D  0801               	movf	1,w
  3752  075E  00F8               	movwf	??_sendBulk
  3753  075F  0878               	movf	??_sendBulk,w
  3754  0760  00F2               	movwf	setPinWithMask@iPin
  3755  0761  01F3               	clrf	setPinWithMask@value
  3756  0762  0AF3               	incf	setPinWithMask@value,f
  3757  0763  3185  2530         	fcall	_setPinWithMask
  3758  0765  0008               	return
  3759  0766                     __end_of_sendBulk:	
  3760                           
  3761                           	psect	text25
  3762  0530                     __ptext25:	
  3763 ;; *************** function _setPinWithMask *****************
  3764 ;; Defined at:
  3765 ;;		line 40 in file "RFM69HCW.c"
  3766 ;; Parameters:    Size  Location     Type
  3767 ;;  pPort           2    0[COMMON] PTR unsigned char 
  3768 ;;		 -> PORTA(1), 
  3769 ;;  iPin            1    2[COMMON] unsigned char 
  3770 ;;  value           1    3[COMMON] unsigned char 
  3771 ;; Auto vars:     Size  Location     Type
  3772 ;;		None
  3773 ;; Return value:  Size  Location     Type
  3774 ;;                  1    wreg      void 
  3775 ;; Registers used:
  3776 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3777 ;; Tracked objects:
  3778 ;;		On entry : 0/0
  3779 ;;		On exit  : 0/0
  3780 ;;		Unchanged: 0/0
  3781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3782 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3784 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3785 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3786 ;;Total ram usage:        6 bytes
  3787 ;; Hardware stack levels used:    1
  3788 ;; This function calls:
  3789 ;;		Nothing
  3790 ;; This function is called by:
  3791 ;;		_sendBulk
  3792 ;;		_receivePayload
  3793 ;;		_sendPayload
  3794 ;; This function uses a non-reentrant model
  3795 ;;
  3796                           
  3797                           
  3798                           ;psect for function _setPinWithMask
  3799  0530                     _setPinWithMask:	
  3800                           
  3801                           ;RFM69HCW.c: 41:     if(value==0){
  3802                           
  3803                           ;incstack = 0
  3804                           ; Regs used in _setPinWithMask: [wreg+fsr1l+fsr1h+status,2+status,0]
  3805  0530  0873               	movf	setPinWithMask@value,w
  3806  0531  1D03               	btfss	3,2
  3807  0532  2D44               	goto	l1095
  3808                           
  3809                           ;RFM69HCW.c: 42:        *pPort &= ~(1<<iPin);
  3810  0533  3001               	movlw	1
  3811  0534  00F4               	movwf	??_setPinWithMask
  3812  0535  0A72               	incf	setPinWithMask@iPin,w
  3813  0536  2D38               	goto	u174
  3814  0537                     u175:	
  3815  0537  35F4               	lslf	??_setPinWithMask,f
  3816  0538                     u174:	
  3817  0538  0B89               	decfsz	9,f
  3818  0539  2D37               	goto	u175
  3819  053A  0874               	movf	??_setPinWithMask,w
  3820  053B  3AFF               	xorlw	255
  3821  053C  00F5               	movwf	??_setPinWithMask+1
  3822  053D  0870               	movf	setPinWithMask@pPort,w
  3823  053E  0086               	movwf	6
  3824  053F  0871               	movf	setPinWithMask@pPort+1,w
  3825  0540  0087               	movwf	7
  3826  0541  0875               	movf	??_setPinWithMask+1,w
  3827  0542  0581               	andwf	1,f
  3828                           
  3829                           ;RFM69HCW.c: 43:     }else{
  3830  0543  0008               	return
  3831  0544                     l1095:	
  3832                           
  3833                           ;RFM69HCW.c: 44:        *pPort |= 1 << iPin;
  3834  0544  3001               	movlw	1
  3835  0545  00F4               	movwf	??_setPinWithMask
  3836  0546  0A72               	incf	setPinWithMask@iPin,w
  3837  0547  2D49               	goto	u184
  3838  0548                     u185:	
  3839  0548  35F4               	lslf	??_setPinWithMask,f
  3840  0549                     u184:	
  3841  0549  0B89               	decfsz	9,f
  3842  054A  2D48               	goto	u185
  3843  054B  0874               	movf	??_setPinWithMask,w
  3844  054C  00F5               	movwf	??_setPinWithMask+1
  3845  054D  0870               	movf	setPinWithMask@pPort,w
  3846  054E  0086               	movwf	6
  3847  054F  0871               	movf	setPinWithMask@pPort+1,w
  3848  0550  0087               	movwf	7
  3849  0551  0875               	movf	??_setPinWithMask+1,w
  3850  0552  0481               	iorwf	1,f
  3851  0553  0008               	return
  3852  0554                     __end_of_setPinWithMask:	
  3853                           
  3854                           	psect	text26
  3855  0625                     __ptext26:	
  3856 ;; *************** function _send *****************
  3857 ;; Defined at:
  3858 ;;		line 24 in file "RFM69HCW.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;  radio           1    wreg     PTR struct RFM69HCW
  3861 ;;		 -> main@radio(75), 
  3862 ;;  msg             1    0[COMMON] unsigned char 
  3863 ;; Auto vars:     Size  Location     Type
  3864 ;;  radio           1    3[COMMON] PTR struct RFM69HCW
  3865 ;;		 -> main@radio(75), 
  3866 ;; Return value:  Size  Location     Type
  3867 ;;                  1    wreg      unsigned char 
  3868 ;; Registers used:
  3869 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3870 ;; Tracked objects:
  3871 ;;		On entry : 0/0
  3872 ;;		On exit  : 0/0
  3873 ;;		Unchanged: 0/0
  3874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3875 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3876 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3877 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3878 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3879 ;;Total ram usage:        4 bytes
  3880 ;; Hardware stack levels used:    1
  3881 ;; This function calls:
  3882 ;;		Nothing
  3883 ;; This function is called by:
  3884 ;;		_sendBulk
  3885 ;;		_receivePayload
  3886 ;;		_sendPayload
  3887 ;; This function uses a non-reentrant model
  3888 ;;
  3889                           
  3890                           
  3891                           ;psect for function _send
  3892  0625                     _send:	
  3893                           
  3894                           ;incstack = 0
  3895                           ; Regs used in _send: [wreg+fsr1l+fsr1h+status,2+status,0]
  3896                           ;send@radio stored from wreg
  3897  0625  00F3               	movwf	send@radio
  3898  0626                     l1097:	
  3899                           ;RFM69HCW.c: 26:     while(SSP1CONbits.WCOL){
  3900                           
  3901                           
  3902                           ;RFM69HCW.c: 25:     SSP1BUF=msg;
  3903  0626  0870               	movf	send@msg,w
  3904  0627  0024               	movlb	4	; select bank4
  3905  0628  0091               	movwf	17	;volatile
  3906                           
  3907                           ;RFM69HCW.c: 26:     while(SSP1CONbits.WCOL){
  3908  0629  1F95               	btfss	21,7	;volatile
  3909  062A  2E2D               	goto	l123
  3910                           
  3911                           ;RFM69HCW.c: 27:             SSP1CONbits.WCOL=0;
  3912  062B  1395               	bcf	21,7	;volatile
  3913  062C  2E26               	goto	l1097
  3914  062D                     l123:	
  3915  062D  1C14               	btfss	20,0	;volatile
  3916  062E  2E2D               	goto	l123
  3917                           
  3918                           ;RFM69HCW.c: 31:     radio->sent[radio->sendReceiveIndex]=msg;
  3919  062F  0870               	movf	send@msg,w
  3920  0630  00F1               	movwf	??_send
  3921  0631  0873               	movf	send@radio,w
  3922  0632  3E4A               	addlw	74
  3923  0633  0086               	movwf	6
  3924  0634  0187               	clrf	7
  3925  0635  0801               	movf	1,w
  3926  0636  0773               	addwf	send@radio,w
  3927  0637  00F2               	movwf	??_send+1
  3928  0638  0872               	movf	??_send+1,w
  3929  0639  3E14               	addlw	20
  3930  063A  0086               	movwf	6
  3931  063B  0187               	clrf	7
  3932  063C  0871               	movf	??_send,w
  3933  063D  0081               	movwf	1
  3934                           
  3935                           ;RFM69HCW.c: 32:     radio->sendReceiveIndex++;
  3936  063E  3001               	movlw	1
  3937  063F  00F1               	movwf	??_send
  3938  0640  0873               	movf	send@radio,w
  3939  0641  3E4A               	addlw	74
  3940  0642  0086               	movwf	6
  3941  0643  0187               	clrf	7
  3942  0644  0871               	movf	??_send,w
  3943  0645  0781               	addwf	1,f
  3944                           
  3945                           ;RFM69HCW.c: 33:     if(radio->sendReceiveIndex>(20 -1)){
  3946  0646  0873               	movf	send@radio,w
  3947  0647  3E4A               	addlw	74
  3948  0648  0086               	movwf	6
  3949  0649  0187               	clrf	7
  3950  064A  3014               	movlw	20
  3951  064B  0201               	subwf	1,w
  3952  064C  1C03               	skipc
  3953  064D  2E53               	goto	l126
  3954                           
  3955                           ;RFM69HCW.c: 34:         radio->sendReceiveIndex=0;
  3956  064E  0873               	movf	send@radio,w
  3957  064F  3E4A               	addlw	74
  3958  0650  0086               	movwf	6
  3959  0651  0187               	clrf	7
  3960  0652  0181               	clrf	1
  3961  0653                     l126:	
  3962                           ;RFM69HCW.c: 35:     }
  3963                           
  3964                           
  3965                           ;RFM69HCW.c: 36:     radio->received[radio->sendReceiveIndex]=SSP1BUF;
  3966  0653  0811               	movf	17,w	;volatile
  3967  0654  00F1               	movwf	??_send
  3968  0655  0873               	movf	send@radio,w
  3969  0656  3E4A               	addlw	74
  3970  0657  0086               	movwf	6
  3971  0658  0187               	clrf	7
  3972  0659  0801               	movf	1,w
  3973  065A  0773               	addwf	send@radio,w
  3974  065B  00F2               	movwf	??_send+1
  3975  065C  0872               	movf	??_send+1,w
  3976  065D  0086               	movwf	6
  3977  065E  0187               	clrf	7
  3978  065F  0871               	movf	??_send,w
  3979  0660  0081               	movwf	1
  3980                           
  3981                           ;RFM69HCW.c: 37:     return radio->received[radio->sendReceiveIndex];
  3982  0661  0873               	movf	send@radio,w
  3983  0662  3E4A               	addlw	74
  3984  0663  0086               	movwf	6
  3985  0664  0187               	clrf	7
  3986  0665  0801               	movf	1,w
  3987  0666  0773               	addwf	send@radio,w
  3988  0667  00F1               	movwf	??_send
  3989  0668  0871               	movf	??_send,w
  3990  0669  0086               	movwf	6
  3991  066A  0187               	clrf	7
  3992  066B  0801               	movf	1,w
  3993  066C  0008               	return
  3994  066D                     __end_of_send:	
  3995  007E                     btemp	set	126	;btemp
  3996  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        119
    BSS         21
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     18      79
    BANK1            80     75      79
    BANK2            80      0      75
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    getPowerSettings@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    restartRx@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    startRSSISampling@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    checkRSSISampling@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    getRSSIThreshold@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    checkForPayload@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    getOperatingMode@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    getModeFlags@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    getFifoFlags@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    getRSSI@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    setOperatingMode@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    setAutoMode@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    setDiodeMapping@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    setPowerOutput@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    initRadio@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    setPreambleLength@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    setModulationThreshold@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    setRecommendedParams@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    setPacketFormat@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    sendPairs@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    setAutoMode@radio	PTR struct RFM69HCW size(1) Largest target is 75
		 -> main@radio(BANK1[75]), 

    getModeFlags@radio	PTR struct RFM69HCW size(1) Largest target is 75
		 -> main@radio(BANK1[75]), 

    setDiodeMapping@radio	PTR struct RFM69HCW size(1) Largest target is 75
		 -> main@radio(BANK1[75]), 

    getOperatingMode@radio	PTR struct RFM69HCW size(1) Largest target is 75
		 -> main@radio(BANK1[75]), 

    getFifoFlags@radio	PTR struct RFM69HCW size(1) Largest target is 75
		 -> main@radio(BANK1[75]), 

    getRSSI@radio	PTR struct RFM69HCW size(1) Largest target is 75
		 -> main@radio(BANK1[75]), 

    sendPayload@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    setPowerOutput@radio	PTR struct RFM69HCW size(1) Largest target is 75
		 -> main@radio(BANK1[75]), 

    initRadio@radio	PTR struct RFM69HCW size(1) Largest target is 75
		 -> main@radio(BANK1[75]), 

    setPreambleLength@radio	PTR struct RFM69HCW size(1) Largest target is 75
		 -> main@radio(BANK1[75]), 

    receivePayload@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    receivePayload@radio	PTR struct RFM69HCW size(1) Largest target is 75
		 -> main@radio(BANK1[75]), 

    setModulationThreshold@radio	PTR struct RFM69HCW size(1) Largest target is 75
		 -> main@radio(BANK1[75]), 

    setRecommendedParams@radio	PTR struct RFM69HCW size(1) Largest target is 75
		 -> main@radio(BANK1[75]), 

    setOperatingMode@radio	PTR struct RFM69HCW size(1) Largest target is 75
		 -> main@radio(BANK1[75]), 

    setPacketFormat@radio	PTR struct RFM69HCW size(1) Largest target is 75
		 -> main@radio(BANK1[75]), 

    setRSSIThreshold@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    setRSSIThreshold@radio	PTR struct RFM69HCW size(1) Largest target is 75
		 -> main@radio(BANK1[75]), 

    setNodeAddress@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    setNodeAddress@radio	PTR struct RFM69HCW size(1) Largest target is 75
		 -> main@radio(BANK1[75]), 

    setPacketLength@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    setPacketLength@radio	PTR struct RFM69HCW size(1) Largest target is 75
		 -> main@radio(BANK1[75]), 

    setSyncWords@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    setSyncWords@radio	PTR struct RFM69HCW size(1) Largest target is 75
		 -> main@radio(BANK1[75]), 

    setPinWithMask@pPort	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    send@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    send@radio	PTR struct RFM69HCW size(1) Largest target is 75
		 -> main@radio(BANK1[75]), 

    sendBulk@msgs	PTR unsigned char  size(1) Largest target is 10
		 -> setAutoMode@msg(BANK0[2]), getPowerSettings@msg(COMMON[2]), restartRx@msg(COMMON[2]), startRSSISampling@msg(COMMON[2]), 
		 -> checkRSSISampling@msg(COMMON[2]), getModeFlags@msg(BANK0[2]), setDiodeMapping@msg(BANK0[2]), getOperatingMode@msg(BANK0[2]), 
		 -> getRSSIThreshold@msg(COMMON[2]), getFifoFlags@msg(BANK0[2]), getRSSI@msg(BANK0[2]), setPowerOutput@msg(BANK0[2]), 
		 -> setPreambleLength@msg(BANK0[2]), checkForPayload@flags(COMMON[2]), setModulationThreshold@msg(BANK0[2]), setOperatingMode@msg(BANK0[2]), 
		 -> setPacketFormat@msg(BANK0[2]), setRSSIThreshold@msg(BANK0[2]), setNodeAddress@msg(BANK0[2]), setPacketLength@msg(BANK0[2]), 
		 -> setSyncWords@msg(BANK0[10]), sendPairs@msg(BANK0[2]), 

    sendBulk@radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    sendBulk@radio	PTR struct RFM69HCW size(1) Largest target is 75
		 -> main@radio(BANK1[75]), 

    sendPairs@radio	PTR struct RFM69HCW size(1) Largest target is 75
		 -> main@radio(BANK1[75]), 

    sendPairs@msgs	PTR unsigned char  size(1) Largest target is 10
		 -> recommended_params(BANK0[10]), 

    radio.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    S139RFM69HCW$SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    F9389.SSport	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 


Critical Paths under _main in COMMON

    _main->_getFifoFlags
    _main->_getModeFlags
    _main->_getOperatingMode
    _main->_getRSSI
    _setPowerOutput->_sendBulk
    _setOperatingMode->_sendBulk
    _setDiodeMapping->_sendBulk
    _setAutoMode->_sendBulk
    _receivePayload->_setPinWithMask
    _initRadio->_setModulationThreshold
    _initRadio->_setNodeAddress
    _initRadio->_setPacketFormat
    _initRadio->_setPacketLength
    _initRadio->_setPreambleLength
    _initRadio->_setRSSIThreshold
    _initRadio->_setSyncWords
    _setSyncWords->_sendBulk
    _setRecommendedParams->_sendPairs
    _sendPairs->_sendBulk
    _setRSSIThreshold->_sendBulk
    _setPreambleLength->_sendBulk
    _setPacketLength->_sendBulk
    _setPacketFormat->_sendBulk
    _setNodeAddress->_sendBulk
    _setModulationThreshold->_sendBulk
    _init->_rfmSetup
    _rfmSetup->_resetRadio
    _getRSSI->_sendBulk
    _getOperatingMode->_sendBulk
    _getModeFlags->_sendBulk
    _getFifoFlags->_sendBulk
    _sendBulk->_setPinWithMask

Critical Paths under _main in BANK0

    _main->_initRadio
    _setPowerOutput->_sendBulk
    _setOperatingMode->_sendBulk
    _setDiodeMapping->_sendBulk
    _setAutoMode->_sendBulk
    _initRadio->_setSyncWords
    _setSyncWords->_sendBulk
    _setRecommendedParams->_sendPairs
    _sendPairs->_sendBulk
    _setRSSIThreshold->_sendBulk
    _setPreambleLength->_sendBulk
    _setPacketLength->_sendBulk
    _setPacketFormat->_sendBulk
    _setNodeAddress->_sendBulk
    _setModulationThreshold->_sendBulk
    _getRSSI->_sendBulk
    _getOperatingMode->_sendBulk
    _getModeFlags->_sendBulk
    _getFifoFlags->_sendBulk

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                76    76      0  111916
                                             17 BANK0      1     1      0
                                              0 BANK1     75    75      0
                       _getFifoFlags
                       _getModeFlags
                   _getOperatingMode
                            _getRSSI
                               _init
                          _initRadio
                     _receivePayload
                        _setAutoMode
                    _setDiodeMapping
                   _setOperatingMode
                     _setPowerOutput
 ---------------------------------------------------------------------------------
 (1) _setPowerOutput                                       6     5      1    6849
                                             12 COMMON     1     0      1
                                              3 BANK0      5     5      0
                           _sendBulk
 ---------------------------------------------------------------------------------
 (1) _setOperatingMode                                     6     5      1    6849
                                             12 COMMON     1     0      1
                                              3 BANK0      5     5      0
                           _sendBulk
 ---------------------------------------------------------------------------------
 (1) _setDiodeMapping                                      6     5      1    6849
                                             12 COMMON     1     0      1
                                              3 BANK0      5     5      0
                           _sendBulk
 ---------------------------------------------------------------------------------
 (1) _setAutoMode                                          6     5      1    6849
                                             12 COMMON     1     0      1
                                              3 BANK0      5     5      0
                           _sendBulk
 ---------------------------------------------------------------------------------
 (1) _receivePayload                                       5     5      0    2542
                                              6 COMMON     5     5      0
                               _send
                     _setPinWithMask
 ---------------------------------------------------------------------------------
 (1) _initRadio                                            1     1      0   54728
                                             16 BANK0      1     1      0
             _setModulationThreshold
                     _setNodeAddress
                    _setPacketFormat
                    _setPacketLength
                  _setPreambleLength
                   _setRSSIThreshold
               _setRecommendedParams
                       _setSyncWords
 ---------------------------------------------------------------------------------
 (2) _setSyncWords                                        15    15      0    6886
                                             12 COMMON     2     2      0
                                              3 BANK0     13    13      0
                           _sendBulk
 ---------------------------------------------------------------------------------
 (2) _setRecommendedParams                                 2     2      0    7136
                                             11 BANK0      2     2      0
                          _sendPairs
 ---------------------------------------------------------------------------------
 (3) _sendPairs                                           10     7      3    7081
                                             12 COMMON     2     2      0
                                              3 BANK0      8     5      3
                           _sendBulk
 ---------------------------------------------------------------------------------
 (2) _setRSSIThreshold                                     5     5      0    6773
                                             12 COMMON     2     2      0
                                              3 BANK0      3     3      0
                           _sendBulk
 ---------------------------------------------------------------------------------
 (2) _setPreambleLength                                    5     5      0    6726
                                             12 COMMON     2     2      0
                                              3 BANK0      3     3      0
                           _sendBulk
 ---------------------------------------------------------------------------------
 (2) _setPacketLength                                      5     5      0    6773
                                             12 COMMON     2     2      0
                                              3 BANK0      3     3      0
                           _sendBulk
 ---------------------------------------------------------------------------------
 (2) _setPacketFormat                                      5     5      0    6726
                                             12 COMMON     2     2      0
                                              3 BANK0      3     3      0
                           _sendBulk
 ---------------------------------------------------------------------------------
 (2) _setNodeAddress                                       5     5      0    6773
                                             12 COMMON     2     2      0
                                              3 BANK0      3     3      0
                           _sendBulk
 ---------------------------------------------------------------------------------
 (2) _setModulationThreshold                               5     5      0    6726
                                             12 COMMON     2     2      0
                                              3 BANK0      3     3      0
                           _sendBulk
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
                           _rfmSetup
 ---------------------------------------------------------------------------------
 (2) _rfmSetup                                             1     1      0       0
                                              1 COMMON     1     1      0
                         _resetRadio
                    _spi_init_master
 ---------------------------------------------------------------------------------
 (3) _spi_init_master                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _resetRadio                                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getRSSI                                              5     5      0    6750
                                             12 COMMON     2     2      0
                                              3 BANK0      3     3      0
                           _sendBulk
 ---------------------------------------------------------------------------------
 (1) _getOperatingMode                                     5     5      0    6750
                                             12 COMMON     2     2      0
                                              3 BANK0      3     3      0
                           _sendBulk
 ---------------------------------------------------------------------------------
 (1) _getModeFlags                                         5     5      0    6750
                                             12 COMMON     2     2      0
                                              3 BANK0      3     3      0
                           _sendBulk
 ---------------------------------------------------------------------------------
 (1) _getFifoFlags                                         5     5      0    6750
                                             12 COMMON     2     2      0
                                              3 BANK0      3     3      0
                           _sendBulk
 ---------------------------------------------------------------------------------
 (2) _sendBulk                                             9     7      2    6645
                                              6 COMMON     6     4      2
                                              0 BANK0      3     3      0
                               _send
                     _setPinWithMask
 ---------------------------------------------------------------------------------
 (3) _setPinWithMask                                       6     2      4    1478
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _send                                                 4     3      1     809
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _getFifoFlags
     _sendBulk
       _send
       _setPinWithMask
   _getModeFlags
     _sendBulk
       _send
       _setPinWithMask
   _getOperatingMode
     _sendBulk
       _send
       _setPinWithMask
   _getRSSI
     _sendBulk
       _send
       _setPinWithMask
   _init
     _rfmSetup
       _resetRadio
       _spi_init_master
   _initRadio
     _setModulationThreshold
       _sendBulk
         _send
         _setPinWithMask
     _setNodeAddress
       _sendBulk
         _send
         _setPinWithMask
     _setPacketFormat
       _sendBulk
         _send
         _setPinWithMask
     _setPacketLength
       _sendBulk
         _send
         _setPinWithMask
     _setPreambleLength
       _sendBulk
         _send
         _setPinWithMask
     _setRSSIThreshold
       _sendBulk
         _send
         _setPinWithMask
     _setRecommendedParams
       _sendPairs
         _sendBulk
           _send
           _setPinWithMask
     _setSyncWords
       _sendBulk
         _send
         _setPinWithMask
   _receivePayload
     _send
     _setPinWithMask
   _setAutoMode
     _sendBulk
       _send
       _setPinWithMask
   _setDiodeMapping
     _sendBulk
       _send
       _setPinWithMask
   _setOperatingMode
     _sendBulk
       _send
       _setPinWithMask
   _setPowerOutput
     _sendBulk
       _send
       _setPinWithMask

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     12      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4B      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4B       9       93.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      F7      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      F7      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Jul 15 17:12:25 2021

                    __CFG_CP$OFF 0000                       _SYNC_WORDS 0020                     _RSSISampling 006E  
                            l123 062D                              l126 0653               setPacketFormat@msg 004F  
             setPacketLength@msg 004F                              u235 074E                              u245 05F2  
                            u317 07D3                              u174 0538                              u175 0537  
                            u327 052A                              u255 0622                              u184 0549  
                            u280 0777                              u185 0548                              u337 0433  
                            u265 05D4                              u347 043D                              u275 06E1  
                   __CFG_BORV$LO 0000                              wreg 0009                     __CFG_IESO$ON 0000  
         _setModulationThreshold 03A8                     __CFG_LVP$OFF 0000                     __CFG_ZCD$OFF 0000  
                           l1123 0750                             l1117 0728                             l1161 05F4  
                           l1321 06F7                             l1095 0544                             l1191 05B7  
                           l1319 06D4                             l1097 0626                             l1339 07A3  
                           _RSSI 00ED                     __CFG_WRT$OFF 0000                    __CFG_FCMEN$ON 0000  
                           _main 0766                             _init 038B                             _send 0625  
                           fsr0h 0005                             fsr1h 0007                             indf0 0000  
                           fsr0l 0004                             indf1 0001                             fsr1l 0006  
                           btemp 007E                    __CFG_BOREN$ON 0000                             start 0002  
           setPacketFormat@F9415 0040                    __CFG_MCLRE$ON 0000             setPacketLength@F9403 006A  
                          ?_main 0070                            ?_init 0070                            ?_send 0070  
                  __CFG_WDTE$OFF 0000             setPacketFormat@radio 0051             setPacketLength@radio 0051  
                          _PORTA 000C                  __end_of_getRSSI 042E          __end_of_setDiodeMapping 0473  
          getOperatingMode@F9464 0032          __size_of_setPowerOutput 0018             __end_of_getFifoFlags 03F2  
                getModeFlags@msg 0050            setOperatingMode@F9420 0064                            status 0003  
                          wtemp0 007E       __size_of_setPreambleLength 0012            getOperatingMode@radio 004F  
                __initialization 07D9                     __end_of_main 07D9                     __end_of_init 038E  
                   __end_of_send 066D            setOperatingMode@radio 0051              setPinWithMask@pPort 0070  
           __end_of_getModeFlags 0406                   _setNodeAddress 04BF              setPinWithMask@value 0073  
         setPreambleLength@F9437 003A                   __CFG_LPBOR$OFF 0000                     ?_setAutoMode 007C  
                         ??_main 005D                           ??_init 0072                           ??_send 0071  
                 __CFG_PLLEN$OFF 0000           setPreambleLength@radio 0051            getRSSIThreshold@F9460 0034  
                         _ANSELA 018C                           _ANSELC 018E                setPowerOutput@msg 0052  
                         _RC0PPS 0EA0                           _RC3PPS 0EA3            setRSSIThreshold@F9411 0066  
                 _setPinWithMask 0530                getFifoFlags@F9456 0036                   __CFG_PWRTE$OFF 0000  
   __end_of_setRecommendedParams 03A8           __end_of_setNodeAddress 04DB            setRSSIThreshold@radio 0051  
       __end_of_setOperatingMode 048B                   __CFG_STVREN$ON 0000                getFifoFlags@radio 004F  
                _setPacketFormat 03BA                  _setPacketLength 04DB                        ??_getRSSI 007C  
               __end_of_rfmSetup 0530                 __end_of_sendBulk 0766                 ?_setDiodeMapping 007C  
               ??_receivePayload 0076           __end_of_setPinWithMask 0554          __end_of__initialization 07FD  
                 __pcstackCOMMON 0070                  ?_setNodeAddress 0070        __size_of_getOperatingMode 0014  
      __size_of_setRSSIThreshold 001C                     __pidataBANK0 057D                     __pidataBANK2 066D  
          getPowerSettings@F9489 0028          ?_setModulationThreshold 0070            __size_of_getFifoFlags 0014  
  setOperatingMode@operatingMode 007C                   _setPowerOutput 048B                  ?_setPinWithMask 0070  
                     __pbssBANK0 005E                       __pbssBANK1 00EB                    sendBulk@radio 004E  
       __size_of_spi_init_master 001C               __size_of_initRadio 0029            __size_of_getModeFlags 0014  
                    sendBulk@len 0077          __end_of_setPacketFormat 03CC          __end_of_setPacketLength 04F7  
                     __pmaintext 0766                  __CFG_PPS1WAY$ON 0000               __size_of_sendPairs 0042  
                   _getFifoFlags 03DE   __end_of_setModulationThreshold 03BA             __size_of_setAutoMode 0018  
                __CFG_WDTCCS$SWC 0000           __end_of_setPowerOutput 04A3                    sendPairs@msgs 004F  
                        _SSP1BUF 0211             _setRecommendedParams 039A                    ?_setSyncWords 0070  
                   _getModeFlags 03F2        setModulationThreshold@msg 004F             setAutoMode@autoModes 007C  
                      ?_rfmSetup 0070                        ?_sendBulk 0076               setDiodeMapping@msg 0052  
            setNodeAddress@F9407 0068                setSyncWords@radio 0059                          _getRSSI 041A  
                        __ptext1 048B                          __ptext2 0473                          __ptext3 045B  
                        __ptext4 0443                          __ptext5 06B8                          __ptext6 0554  
                        __ptext7 05A9                          __ptext8 039A                          __ptext9 05E3  
              getModeFlags@F9473 0030                __end_of_initRadio 057D                  ?_setPowerOutput 007C  
                 initRadio@radio 005C              setNodeAddress@radio 0051            ?_setRecommendedParams 0070  
                     getRSSI@msg 0050                   ??_setSyncWords 007C                          clrloop0 038F  
              __end_of_sendPairs 0625             end_of_initialization 07FD                getModeFlags@radio 004F  
           checkForPayload@F9430 003C                          init_ram 0394                          initloop 0395  
                        send@msg 0070                       ??_rfmSetup 0071                       ??_sendBulk 0078  
                     _resetRadio 042E                 ?_setPacketFormat 0070                 ?_setPacketLength 0070  
              ??_spi_init_master 0070                 _getOperatingMode 0406                 _setRSSIThreshold 04F7  
              ?_setOperatingMode 007C               ??_setOperatingMode 004F                        _PORTCbits 000E  
                      _SSPDATPPS 0E21                 __CFG_FOSC$INTOSC 0000                        _TRISAbits 008C  
                      _TRISCbits 008E           setDiodeMapping@mapping 007C                 ??_setNodeAddress 007C  
           setPreambleLength@msg 004F                  receivePayload@i 0078           checkRSSISampling@F9477 002E  
                getFifoFlags@msg 0050              start_initialization 07D9                 ??_setPinWithMask 0074  
         ??_setRecommendedParams 0057               setPinWithMask@iPin 0072         __size_of_setDiodeMapping 0018  
                    ?_resetRadio 0070           startRSSISampling@F9481 002C                  setSyncWords@msg 004F  
           setDiodeMapping@F9469 0060                setNodeAddress@msg 004F             __end_of_setSyncWords 05E3  
                    __pdataBANK0 0020                      __pdataBANK2 0120             setDiodeMapping@radio 0051  
                      ___latbits 0002                    __pcstackBANK0 004C                    __pcstackBANK1 00A0  
                  setSyncWords@i 005A        setRecommendedParams@radio 0058                     sendBulk@msgs 0076  
        __size_of_receivePayload 0054                __size_of_rfmSetup 001D      setModulationThreshold@F9426 003E  
              __size_of_sendBulk 005A                       sendPairs@i 0055                        _fifoFlags 00EC  
               ??_setPowerOutput 004F                    ??_setAutoMode 004F              receivePayload@radio 007A  
                   sendPairs@len 0050                         ?_getRSSI 0070                     sendPairs@msg 0053  
            setPowerOutput@F9444 0062      setModulationThreshold@radio 0051                   setAutoMode@msg 0052  
            __size_of_resetRadio 0015                        _initRadio 0554         __end_of_getOperatingMode 041A  
       __end_of_setRSSIThreshold 0513                        _modeFlags 00EB                   sendPairs@F9382 006C  
            setPowerOutput@radio 0051                  _spi_init_master 04A3                        _sendPairs 05E3  
                   getRSSI@F9452 0038                    _operatingMode 00EE                        clear_ram0 038E  
                 sendPairs@radio 0052                   restartRx@F9485 002A                        main@F9389 0120  
           __CFG_WDTCPS$WDTCPS1F 0000                ??_setDiodeMapping 004F                     getRSSI@radio 004F  
               setAutoMode@F9494 005E                        main@radio 00A0              __end_of_setAutoMode 045B  
                     ?_initRadio 0070        __size_of_setOperatingMode 0018                 setAutoMode@radio 0051  
            getOperatingMode@msg 0050              setOperatingMode@msg 0052                       ?_sendPairs 004F  
          __size_of_setSyncWords 003A         ??_setModulationThreshold 007C              setRSSIThreshold@msg 004F  
       __size_of_setPacketFormat 0012         __size_of_setPacketLength 001C                 __size_of_getRSSI 0014  
        __end_of_spi_init_master 04BF                        send@radio 0073                        sendBulk@i 004C  
                       __ptext10 04F7                         __ptext11 03CC                         __ptext20 041A  
                       __ptext12 04DB                         __ptext21 0406                         __ptext13 03BA  
                       __ptext22 03F2                         __ptext14 04BF                         __ptext23 03DE  
                       __ptext15 03A8                         __ptext24 070C                         __ptext16 038B  
                       __ptext25 0530                         __ptext17 0513                         __ptext26 0625  
                       __ptext18 04A3                         __ptext19 042E                     _SSP1CON1bits 0215  
                   _setSyncWords 05A9                    __size_of_main 0073                    __size_of_init 0003  
                  __size_of_send 0048                     ??_resetRadio 0070                         _rfmSetup 0513  
           __CFG_WDTCWS$WDTCWSSW 0000                         _sendBulk 070C                   _receivePayload 06B8  
                  ?_getFifoFlags 0070                     _SSP1STATbits 0214                      _setAutoMode 0443  
                    ??_initRadio 007E               __end_of_resetRadio 0443    __size_of_setRecommendedParams 000E  
                  ?_getModeFlags 0070               _recommended_params 0042                      ??_sendPairs 007C  
              __CFG_CLKOUTEN$OFF 0000           __end_of_receivePayload 070C                      _SSP1CONbits 0215  
                     _OSCCONbits 0099      setPowerOutput@powerSettings 007C                _setPreambleLength 03CC  
__size_of_setModulationThreshold 0012                   ??_getFifoFlags 007C               ?_setPreambleLength 0070  
        __size_of_setNodeAddress 001C              ??_setPreambleLength 007C                 ?_spi_init_master 0070  
              ??_setPacketFormat 007C                ??_setPacketLength 007C                 _setOperatingMode 0473  
                 ??_getModeFlags 007C                ?_getOperatingMode 0070                ?_setRSSIThreshold 0070  
             ??_getOperatingMode 007C               ??_setRSSIThreshold 007C                  _setDiodeMapping 045B  
        __size_of_setPinWithMask 0024                  ?_receivePayload 0070        __end_of_setPreambleLength 03DE  
